#!/usr/bin/env bash

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! openapi-generator (https://openapi-generator.tech)
# ! FROM OPENAPI SPECIFICATION IN JSON.
# !
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#
# This is a Bash client for PingOne Platform API - Management.
#
# LICENSE:
# 
#
# CONTACT:
# 
#
# MORE INFORMATION:
# https://apidocs.pingidentity.com/pingone/platform/v1/api/
#

# For improved pattern matching in case statemets
shopt -s extglob

###############################################################################
#
# Make sure Bash is at least in version 4.3
#
###############################################################################
if ! ( (("${BASH_VERSION:0:1}" == "4")) && (("${BASH_VERSION:2:1}" >= "3")) ) \
  && ! (("${BASH_VERSION:0:1}" >= "5")); then
    echo ""
    echo "Sorry - your Bash version is ${BASH_VERSION}"
    echo ""
    echo "You need at least Bash 4.3 to run this script."
    echo ""
    exit 1
fi

###############################################################################
#
# Global variables
#
###############################################################################

##
# The filename of this script for help messages
script_name=$(basename "$0")

##
# Map for headers passed after operation as KEY:VALUE
declare -A header_arguments


##
# Map for operation parameters passed after operation as PARAMETER=VALUE
# These will be mapped to appropriate path or query parameters
# The values in operation_parameters are arrays, so that multiple values
# can be provided for the same parameter if allowed by API specification
declare -A operation_parameters

##
# Declare colors with autodection if output is terminal
if [ -t 1 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    BOLD="$(tput bold)"
    OFF="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    CYAN=""
    WHITE=""
    BOLD=""
    OFF=""
fi

declare -a result_color_table=( "$WHITE" "$WHITE" "$GREEN" "$YELLOW" "$WHITE" "$MAGENTA" "$WHITE" )

##
# This array stores the minimum number of required occurrences for parameter
# 0 - optional
# 1 - required
declare -A operation_parameters_minimum_occurrences
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::limit"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::order"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::limit"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::order"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::samplePeriod"]=0
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::orgID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::licenseID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::aggregatedBy"]=0
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::limit"]=0
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::order"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::revisionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDDelete:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDGet:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAgreementsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::alertChannelID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete:::alertChannelsID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDAlertChannelsPost:::body"]=0
operation_parameters_minimum_occurrences["createApplicationAttributeMapping:::envID"]=1
operation_parameters_minimum_occurrences["createApplicationAttributeMapping:::appID"]=1
operation_parameters_minimum_occurrences["createApplicationAttributeMapping:::ApplicationAttributeMapping"]=0
operation_parameters_minimum_occurrences["deleteApplicationAttributeMapping:::envID"]=1
operation_parameters_minimum_occurrences["deleteApplicationAttributeMapping:::appID"]=1
operation_parameters_minimum_occurrences["deleteApplicationAttributeMapping:::attrMappingID"]=1
operation_parameters_minimum_occurrences["readAllApplicationAttributeMappings:::envID"]=1
operation_parameters_minimum_occurrences["readAllApplicationAttributeMappings:::appID"]=1
operation_parameters_minimum_occurrences["readOneApplicationAttributeMapping:::envID"]=1
operation_parameters_minimum_occurrences["readOneApplicationAttributeMapping:::appID"]=1
operation_parameters_minimum_occurrences["readOneApplicationAttributeMapping:::attrMappingID"]=1
operation_parameters_minimum_occurrences["updateApplicationAttributeMapping:::envID"]=1
operation_parameters_minimum_occurrences["updateApplicationAttributeMapping:::appID"]=1
operation_parameters_minimum_occurrences["updateApplicationAttributeMapping:::attrMappingID"]=1
operation_parameters_minimum_occurrences["updateApplicationAttributeMapping:::ApplicationAttributeMapping"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::pushCredID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::pushCredID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::pushCredID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::body"]=0
operation_parameters_minimum_occurrences["createApplicationGrant:::envID"]=1
operation_parameters_minimum_occurrences["createApplicationGrant:::appID"]=1
operation_parameters_minimum_occurrences["createApplicationGrant:::ApplicationResourceGrant"]=0
operation_parameters_minimum_occurrences["deleteApplicationGrant:::envID"]=1
operation_parameters_minimum_occurrences["deleteApplicationGrant:::appID"]=1
operation_parameters_minimum_occurrences["deleteApplicationGrant:::grantID"]=1
operation_parameters_minimum_occurrences["readAllApplicationGrants:::envID"]=1
operation_parameters_minimum_occurrences["readAllApplicationGrants:::appID"]=1
operation_parameters_minimum_occurrences["readOneApplicationGrant:::envID"]=1
operation_parameters_minimum_occurrences["readOneApplicationGrant:::appID"]=1
operation_parameters_minimum_occurrences["readOneApplicationGrant:::grantID"]=1
operation_parameters_minimum_occurrences["updateApplicationGrant:::envID"]=1
operation_parameters_minimum_occurrences["updateApplicationGrant:::appID"]=1
operation_parameters_minimum_occurrences["updateApplicationGrant:::grantID"]=1
operation_parameters_minimum_occurrences["updateApplicationGrant:::ApplicationResourceGrant"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::roleAssignmentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::roleAssignmentID"]=1
operation_parameters_minimum_occurrences["readApplicationSecret:::envID"]=1
operation_parameters_minimum_occurrences["readApplicationSecret:::appID"]=1
operation_parameters_minimum_occurrences["updateApplicationSecret:::envID"]=1
operation_parameters_minimum_occurrences["updateApplicationSecret:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::SOPAssignmentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::SOPAssignmentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::appID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::SOPAssignmentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::body"]=0
operation_parameters_minimum_occurrences["createApplication:::envID"]=1
operation_parameters_minimum_occurrences["createApplication:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_minimum_occurrences["deleteApplication:::envID"]=1
operation_parameters_minimum_occurrences["deleteApplication:::appID"]=1
operation_parameters_minimum_occurrences["readAllApplications:::envID"]=1
operation_parameters_minimum_occurrences["readOneApplication:::envID"]=1
operation_parameters_minimum_occurrences["readOneApplication:::appID"]=1
operation_parameters_minimum_occurrences["updateApplication:::envID"]=1
operation_parameters_minimum_occurrences["updateApplication:::appID"]=1
operation_parameters_minimum_occurrences["updateApplication:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActivitiesActivityIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActivitiesActivityIDGet:::activityID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActivitiesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActivitiesGet:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActivitiesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDActivitiesPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::limit"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::samplePeriod"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::samplePeriodCount"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::filter"]=0
operation_parameters_minimum_occurrences["readOneBillOfMaterials:::envID"]=1
operation_parameters_minimum_occurrences["updateBillOfMaterials:::envID"]=1
operation_parameters_minimum_occurrences["updateBillOfMaterials:::BillOfMaterials"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDBrandingSettingsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDBrandingSettingsGet:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDBrandingSettingsPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDBrandingSettingsPut:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDBrandingSettingsPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesGet:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesPost:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::themeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::themeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDelete:::themeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDelete:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDGet:::themeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDGet:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::themeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCapabilitiesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDCapabilitiesGet:::orgID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet:::certID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDDelete:::certID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDGet:::certID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::usageType"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::file"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDDecryptionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDDecryptionsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEncryptionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEncryptionsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDApplicationsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDApplicationsGet:::keyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::keyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::keyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDDelete:::keyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDGet:::keyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDGet:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDPut:::keyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysKeyIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysPost:::usageType"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDKeysPost:::file"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSigningsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSigningsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDVerificationsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDVerificationsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDDelete:::domID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDGet:::domID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::domID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDCustomDomainsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::deviceAuthPolicyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet:::envID"]=1
operation_parameters_minimum_occurrences["createEnvironmentActiveLicense:::Environment"]=0
operation_parameters_minimum_occurrences["deleteEnvironment:::envID"]=1
operation_parameters_minimum_occurrences["readAllEnvironments:::limit"]=0
operation_parameters_minimum_occurrences["readAllEnvironments:::filter"]=0
operation_parameters_minimum_occurrences["readOneEnvironment:::envID"]=1
operation_parameters_minimum_occurrences["updateEnvironment:::envID"]=1
operation_parameters_minimum_occurrences["updateEnvironment:::Environment"]=0
operation_parameters_minimum_occurrences["updateEnvironmentType:::envID"]=1
operation_parameters_minimum_occurrences["updateEnvironmentType:::InlineObject2"]=0
operation_parameters_minimum_occurrences["createGatewayCredential:::envID"]=1
operation_parameters_minimum_occurrences["createGatewayCredential:::gatewayID"]=1
operation_parameters_minimum_occurrences["deleteGatewayCredential:::envID"]=1
operation_parameters_minimum_occurrences["deleteGatewayCredential:::gatewayID"]=1
operation_parameters_minimum_occurrences["deleteGatewayCredential:::credentialID"]=1
operation_parameters_minimum_occurrences["readAllGatewayInstances:::envID"]=1
operation_parameters_minimum_occurrences["readAllGatewayInstances:::gatewayID"]=1
operation_parameters_minimum_occurrences["readOneGatewayInstance:::envID"]=1
operation_parameters_minimum_occurrences["readOneGatewayInstance:::gatewayID"]=1
operation_parameters_minimum_occurrences["readOneGatewayInstance:::instanceID"]=1
operation_parameters_minimum_occurrences["createGatewayRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["createGatewayRoleAssignment:::gatewayID"]=1
operation_parameters_minimum_occurrences["createGatewayRoleAssignment:::RoleAssignment"]=0
operation_parameters_minimum_occurrences["deleteGatewayRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["deleteGatewayRoleAssignment:::gatewayID"]=1
operation_parameters_minimum_occurrences["deleteGatewayRoleAssignment:::gatewayRoleAssignmentID"]=1
operation_parameters_minimum_occurrences["readGatewayRoleAssignments:::envID"]=1
operation_parameters_minimum_occurrences["readGatewayRoleAssignments:::gatewayID"]=1
operation_parameters_minimum_occurrences["readOneGatewayRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["readOneGatewayRoleAssignment:::gatewayID"]=1
operation_parameters_minimum_occurrences["readOneGatewayRoleAssignment:::gatewayRoleAssignmentID"]=1
operation_parameters_minimum_occurrences["updateGatewayRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["updateGatewayRoleAssignment:::gatewayID"]=1
operation_parameters_minimum_occurrences["updateGatewayRoleAssignment:::gatewayRoleAssignmentID"]=1
operation_parameters_minimum_occurrences["updateGatewayRoleAssignment:::body"]=0
operation_parameters_minimum_occurrences["createGateway:::envID"]=1
operation_parameters_minimum_occurrences["createGateway:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_minimum_occurrences["deleteGateway:::envID"]=1
operation_parameters_minimum_occurrences["deleteGateway:::gatewayID"]=1
operation_parameters_minimum_occurrences["readAllGateways:::envID"]=1
operation_parameters_minimum_occurrences["readOneGateway:::envID"]=1
operation_parameters_minimum_occurrences["readOneGateway:::gatewayID"]=1
operation_parameters_minimum_occurrences["updateGateway:::envID"]=1
operation_parameters_minimum_occurrences["updateGateway:::gatewayID"]=1
operation_parameters_minimum_occurrences["updateGateway:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_minimum_occurrences["createGroup:::envID"]=1
operation_parameters_minimum_occurrences["createGroup:::Group"]=0
operation_parameters_minimum_occurrences["deleteGroup:::envID"]=1
operation_parameters_minimum_occurrences["deleteGroup:::groupID"]=1
operation_parameters_minimum_occurrences["readAllGroups:::envID"]=1
operation_parameters_minimum_occurrences["readAllGroups:::filter"]=0
operation_parameters_minimum_occurrences["readAllGroups:::limit"]=0
operation_parameters_minimum_occurrences["readOneGroup:::envID"]=1
operation_parameters_minimum_occurrences["readOneGroup:::groupID"]=1
operation_parameters_minimum_occurrences["readOneGroup:::include"]=0
operation_parameters_minimum_occurrences["updateGroup:::envID"]=1
operation_parameters_minimum_occurrences["updateGroup:::groupID"]=1
operation_parameters_minimum_occurrences["updateGroup:::Group"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::mappingID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::mappingID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::mappingID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::ruleID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::ruleID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::planID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::planID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::planID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::previousRevisionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::planID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesGet:::Authorization"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::ruleID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::ruleID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::storeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataScimPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataScimPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::storeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::storeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::Accept"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::storeID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::body"]=0
operation_parameters_minimum_occurrences["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::providerID"]=1
operation_parameters_minimum_occurrences["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::idpAttrID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::idpAttrID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::idpAttrID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDGet:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::providerID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesImgIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesImgIDDelete:::imgID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesImgIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesImgIDGet:::imgID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDImagesPost:::Content-Disposition"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDGet:::integrationID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet:::integrationID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::integrationID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::integrationVersionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::integrationID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::integrationVersionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::l10nStatusID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::l10nStatusID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::l10nStatusID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDDelete:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDGet:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::languageID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDLanguagesPost:::body"]=0
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesGet:::orgID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDGet:::orgID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDGet:::licenseID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNameGet:::orgID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNameGet:::licenseID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::orgID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::licenseID"]=1
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMfaSettingsDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMfaSettingsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMfaSettingsPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDMfaSettingsPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::contentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::contentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::contentID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameGet:::templateName"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet:::phoneDeliverySettingsId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::phoneDeliverySettingsId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet:::emailDomainID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::trustedEmailId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::trustedEmailId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::trustedEmailId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet:::emailDomainId"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDEmailDomainsPost:::body"]=0
operation_parameters_minimum_occurrences["v1OrganizationsOrgIDGet:::orgID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet:::passwordPolicyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::passwordPolicyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::body"]=0
operation_parameters_minimum_occurrences["createPopulation:::envID"]=1
operation_parameters_minimum_occurrences["createPopulation:::Population"]=1
operation_parameters_minimum_occurrences["deletePopulation:::envID"]=1
operation_parameters_minimum_occurrences["deletePopulation:::popID"]=1
operation_parameters_minimum_occurrences["readAllPopulations:::envID"]=1
operation_parameters_minimum_occurrences["readAllPopulations:::limit"]=0
operation_parameters_minimum_occurrences["readAllPopulations:::filter"]=0
operation_parameters_minimum_occurrences["readOnePopulation:::envID"]=1
operation_parameters_minimum_occurrences["readOnePopulation:::popID"]=1
operation_parameters_minimum_occurrences["updatePopulation:::envID"]=1
operation_parameters_minimum_occurrences["updatePopulation:::popID"]=1
operation_parameters_minimum_occurrences["updatePopulation:::Population"]=0
operation_parameters_minimum_occurrences["createResourceAttribute:::envID"]=1
operation_parameters_minimum_occurrences["createResourceAttribute:::resourceID"]=1
operation_parameters_minimum_occurrences["createResourceAttribute:::ResourceAttribute"]=0
operation_parameters_minimum_occurrences["deleteResourceAttribute:::envID"]=1
operation_parameters_minimum_occurrences["deleteResourceAttribute:::resourceID"]=1
operation_parameters_minimum_occurrences["deleteResourceAttribute:::resourceAttrID"]=1
operation_parameters_minimum_occurrences["readAllResourceAttributes:::envID"]=1
operation_parameters_minimum_occurrences["readAllResourceAttributes:::resourceID"]=1
operation_parameters_minimum_occurrences["readOneResourceAttribute:::envID"]=1
operation_parameters_minimum_occurrences["readOneResourceAttribute:::resourceID"]=1
operation_parameters_minimum_occurrences["readOneResourceAttribute:::resourceAttrID"]=1
operation_parameters_minimum_occurrences["updateResourceAttribute:::envID"]=1
operation_parameters_minimum_occurrences["updateResourceAttribute:::resourceID"]=1
operation_parameters_minimum_occurrences["updateResourceAttribute:::resourceAttrID"]=1
operation_parameters_minimum_occurrences["updateResourceAttribute:::ResourceAttribute"]=0
operation_parameters_minimum_occurrences["createResourceScope:::envID"]=1
operation_parameters_minimum_occurrences["createResourceScope:::resourceID"]=1
operation_parameters_minimum_occurrences["createResourceScope:::ResourceScope"]=0
operation_parameters_minimum_occurrences["deleteResourceScope:::envID"]=1
operation_parameters_minimum_occurrences["deleteResourceScope:::resourceID"]=1
operation_parameters_minimum_occurrences["deleteResourceScope:::scopeID"]=1
operation_parameters_minimum_occurrences["readAllResourceScopes:::envID"]=1
operation_parameters_minimum_occurrences["readAllResourceScopes:::resourceID"]=1
operation_parameters_minimum_occurrences["readOneResourceScope:::envID"]=1
operation_parameters_minimum_occurrences["readOneResourceScope:::resourceID"]=1
operation_parameters_minimum_occurrences["readOneResourceScope:::scopeID"]=1
operation_parameters_minimum_occurrences["updateResourceScope:::envID"]=1
operation_parameters_minimum_occurrences["updateResourceScope:::resourceID"]=1
operation_parameters_minimum_occurrences["updateResourceScope:::scopeID"]=1
operation_parameters_minimum_occurrences["updateResourceScope:::ResourceScope"]=0
operation_parameters_minimum_occurrences["createResource:::envID"]=1
operation_parameters_minimum_occurrences["createResource:::Resource"]=0
operation_parameters_minimum_occurrences["deleteResource:::envID"]=1
operation_parameters_minimum_occurrences["deleteResource:::resourceID"]=1
operation_parameters_minimum_occurrences["readAllResources:::envID"]=1
operation_parameters_minimum_occurrences["readOneResource:::envID"]=1
operation_parameters_minimum_occurrences["readOneResource:::resourceID"]=1
operation_parameters_minimum_occurrences["updateResource:::envID"]=1
operation_parameters_minimum_occurrences["updateResource:::resourceID"]=1
operation_parameters_minimum_occurrences["updateResource:::Resource"]=0
operation_parameters_minimum_occurrences["createRiskPredictor:::envID"]=1
operation_parameters_minimum_occurrences["createRiskPredictor:::RiskPredictor"]=0
operation_parameters_minimum_occurrences["deleteRiskAdvancedPredictor:::envID"]=1
operation_parameters_minimum_occurrences["deleteRiskAdvancedPredictor:::riskPredictorID"]=1
operation_parameters_minimum_occurrences["readAllRiskPredictors:::envID"]=1
operation_parameters_minimum_occurrences["readOneRiskPredictor:::envID"]=1
operation_parameters_minimum_occurrences["readOneRiskPredictor:::riskPredictorID"]=1
operation_parameters_minimum_occurrences["updateRiskPredictor:::envID"]=1
operation_parameters_minimum_occurrences["updateRiskPredictor:::riskPredictorID"]=1
operation_parameters_minimum_occurrences["updateRiskPredictor:::RiskPredictor"]=0
operation_parameters_minimum_occurrences["createRiskEvaluation:::envID"]=1
operation_parameters_minimum_occurrences["createRiskEvaluation:::RiskEvaluation"]=0
operation_parameters_minimum_occurrences["readOneRiskEvaluation:::envID"]=1
operation_parameters_minimum_occurrences["readOneRiskEvaluation:::riskID"]=1
operation_parameters_minimum_occurrences["updateRiskEvaluation:::envID"]=1
operation_parameters_minimum_occurrences["updateRiskEvaluation:::riskID"]=1
operation_parameters_minimum_occurrences["updateRiskEvaluation:::RiskEvaluationEvent"]=0
operation_parameters_minimum_occurrences["createRiskPolicySet:::envID"]=1
operation_parameters_minimum_occurrences["createRiskPolicySet:::RiskPolicySet"]=0
operation_parameters_minimum_occurrences["deleteRiskPolicySet:::envID"]=1
operation_parameters_minimum_occurrences["deleteRiskPolicySet:::riskPolicySetID"]=1
operation_parameters_minimum_occurrences["readOneRiskPolicySet:::envID"]=1
operation_parameters_minimum_occurrences["readOneRiskPolicySet:::riskPolicySetID"]=1
operation_parameters_minimum_occurrences["readRiskPolicySets:::envID"]=1
operation_parameters_minimum_occurrences["updateRiskPolicySet:::envID"]=1
operation_parameters_minimum_occurrences["updateRiskPolicySet:::riskPolicySetID"]=1
operation_parameters_minimum_occurrences["updateRiskPolicySet:::RiskPolicySet"]=0
operation_parameters_minimum_occurrences["readOneRole:::roleID"]=1
operation_parameters_minimum_occurrences["createAttribute:::envID"]=1
operation_parameters_minimum_occurrences["createAttribute:::schemaID"]=1
operation_parameters_minimum_occurrences["createAttribute:::SchemaAttribute"]=0
operation_parameters_minimum_occurrences["deleteAttribute:::envID"]=1
operation_parameters_minimum_occurrences["deleteAttribute:::schemaID"]=1
operation_parameters_minimum_occurrences["deleteAttribute:::attributeID"]=1
operation_parameters_minimum_occurrences["readAllSchemaAttributes:::envID"]=1
operation_parameters_minimum_occurrences["readAllSchemaAttributes:::schemaID"]=1
operation_parameters_minimum_occurrences["readAllSchemas:::envID"]=1
operation_parameters_minimum_occurrences["readOneAttribute:::envID"]=1
operation_parameters_minimum_occurrences["readOneAttribute:::schemaID"]=1
operation_parameters_minimum_occurrences["readOneAttribute:::attributeID"]=1
operation_parameters_minimum_occurrences["readOneSchema:::envID"]=1
operation_parameters_minimum_occurrences["readOneSchema:::schemaID"]=1
operation_parameters_minimum_occurrences["updateAttributePatch:::envID"]=1
operation_parameters_minimum_occurrences["updateAttributePatch:::schemaID"]=1
operation_parameters_minimum_occurrences["updateAttributePatch:::attributeID"]=1
operation_parameters_minimum_occurrences["updateAttributePatch:::SchemaAttribute"]=0
operation_parameters_minimum_occurrences["updateAttributePut:::envID"]=1
operation_parameters_minimum_occurrences["updateAttributePut:::schemaID"]=1
operation_parameters_minimum_occurrences["updateAttributePut:::attributeID"]=1
operation_parameters_minimum_occurrences["updateAttributePut:::SchemaAttribute"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPost:::body"]=0
operation_parameters_minimum_occurrences["v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost:::policyID"]=1
operation_parameters_minimum_occurrences["v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::actionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::actionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::actionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::policyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete:::subscriptionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet:::subscriptionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::subscriptionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTotalIdentitiesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDTotalIdentitiesGet:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUserActivitiesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUserActivitiesGet:::filter"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::body"]=0
operation_parameters_minimum_occurrences["addUserToGroup:::envID"]=1
operation_parameters_minimum_occurrences["addUserToGroup:::userID"]=1
operation_parameters_minimum_occurrences["addUserToGroup:::InlineObject3"]=0
operation_parameters_minimum_occurrences["readAllGroupMembershipsForUser:::envID"]=1
operation_parameters_minimum_occurrences["readAllGroupMembershipsForUser:::userID"]=1
operation_parameters_minimum_occurrences["readAllGroupMembershipsForUser:::expand"]=0
operation_parameters_minimum_occurrences["readAllGroupMembershipsForUser:::limit"]=0
operation_parameters_minimum_occurrences["readAllGroupMembershipsForUser:::filter"]=0
operation_parameters_minimum_occurrences["readOneGroupMembershipForUser:::envID"]=1
operation_parameters_minimum_occurrences["readOneGroupMembershipForUser:::userID"]=1
operation_parameters_minimum_occurrences["readOneGroupMembershipForUser:::groupID"]=1
operation_parameters_minimum_occurrences["readOneGroupMembershipForUser:::expand"]=0
operation_parameters_minimum_occurrences["removeUserFromGroup:::envID"]=1
operation_parameters_minimum_occurrences["removeUserFromGroup:::userID"]=1
operation_parameters_minimum_occurrences["removeUserFromGroup:::groupID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::linkedAccountID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::linkedAccountID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::deviceID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::deviceID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::deviceID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::deviceID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::deviceID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::pairingKeyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::pairingKeyID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::sessionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::sessionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPost:::content-type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::agreementID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::transactionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::transactionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::transactionID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::content-type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::Content-Type"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::body"]=0
operation_parameters_minimum_occurrences["createUserRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["createUserRoleAssignment:::userID"]=1
operation_parameters_minimum_occurrences["createUserRoleAssignment:::RoleAssignment"]=0
operation_parameters_minimum_occurrences["deleteUserRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["deleteUserRoleAssignment:::userID"]=1
operation_parameters_minimum_occurrences["deleteUserRoleAssignment:::roleAssignmentID"]=1
operation_parameters_minimum_occurrences["readOneRoleAssignment:::envID"]=1
operation_parameters_minimum_occurrences["readOneRoleAssignment:::userID"]=1
operation_parameters_minimum_occurrences["readOneRoleAssignment:::roleAssignmentID"]=1
operation_parameters_minimum_occurrences["readUserRoleAssignments:::envID"]=1
operation_parameters_minimum_occurrences["readUserRoleAssignments:::userID"]=1
operation_parameters_minimum_occurrences["createUser:::envID"]=1
operation_parameters_minimum_occurrences["createUser:::content-type"]=0
operation_parameters_minimum_occurrences["createUser:::User"]=0
operation_parameters_minimum_occurrences["deleteUser:::envID"]=1
operation_parameters_minimum_occurrences["deleteUser:::userID"]=1
operation_parameters_minimum_occurrences["readAllUsers:::envID"]=1
operation_parameters_minimum_occurrences["readAllUsers:::filter"]=0
operation_parameters_minimum_occurrences["readAllUsers:::limit"]=0
operation_parameters_minimum_occurrences["readUser:::envID"]=1
operation_parameters_minimum_occurrences["readUser:::userID"]=1
operation_parameters_minimum_occurrences["readUser:::include"]=0
operation_parameters_minimum_occurrences["updateUserPatch:::envID"]=1
operation_parameters_minimum_occurrences["updateUserPatch:::userID"]=1
operation_parameters_minimum_occurrences["updateUserPatch:::User"]=0
operation_parameters_minimum_occurrences["updateUserPut:::envID"]=1
operation_parameters_minimum_occurrences["updateUserPut:::userID"]=1
operation_parameters_minimum_occurrences["updateUserPut:::User"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::body"]=0
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::envID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::userID"]=1
operation_parameters_minimum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::body"]=0

##
# This array stores the maximum number of allowed occurrences for parameter
# 1 - single value
# 2 - 2 values
# N - N values
# 0 - unlimited
declare -A operation_parameters_maximum_occurrences
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::limit"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActiveIdentityCountsGet:::order"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::limit"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::order"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::samplePeriod"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::orgID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::licenseID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::aggregatedBy"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::limit"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::order"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::revisionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDDelete:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDGet:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAgreementsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::alertChannelID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete:::alertChannelsID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDAlertChannelsPost:::body"]=0
operation_parameters_maximum_occurrences["createApplicationAttributeMapping:::envID"]=0
operation_parameters_maximum_occurrences["createApplicationAttributeMapping:::appID"]=0
operation_parameters_maximum_occurrences["createApplicationAttributeMapping:::ApplicationAttributeMapping"]=0
operation_parameters_maximum_occurrences["deleteApplicationAttributeMapping:::envID"]=0
operation_parameters_maximum_occurrences["deleteApplicationAttributeMapping:::appID"]=0
operation_parameters_maximum_occurrences["deleteApplicationAttributeMapping:::attrMappingID"]=0
operation_parameters_maximum_occurrences["readAllApplicationAttributeMappings:::envID"]=0
operation_parameters_maximum_occurrences["readAllApplicationAttributeMappings:::appID"]=0
operation_parameters_maximum_occurrences["readOneApplicationAttributeMapping:::envID"]=0
operation_parameters_maximum_occurrences["readOneApplicationAttributeMapping:::appID"]=0
operation_parameters_maximum_occurrences["readOneApplicationAttributeMapping:::attrMappingID"]=0
operation_parameters_maximum_occurrences["updateApplicationAttributeMapping:::envID"]=0
operation_parameters_maximum_occurrences["updateApplicationAttributeMapping:::appID"]=0
operation_parameters_maximum_occurrences["updateApplicationAttributeMapping:::attrMappingID"]=0
operation_parameters_maximum_occurrences["updateApplicationAttributeMapping:::ApplicationAttributeMapping"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::pushCredID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::pushCredID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::pushCredID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::body"]=0
operation_parameters_maximum_occurrences["createApplicationGrant:::envID"]=0
operation_parameters_maximum_occurrences["createApplicationGrant:::appID"]=0
operation_parameters_maximum_occurrences["createApplicationGrant:::ApplicationResourceGrant"]=0
operation_parameters_maximum_occurrences["deleteApplicationGrant:::envID"]=0
operation_parameters_maximum_occurrences["deleteApplicationGrant:::appID"]=0
operation_parameters_maximum_occurrences["deleteApplicationGrant:::grantID"]=0
operation_parameters_maximum_occurrences["readAllApplicationGrants:::envID"]=0
operation_parameters_maximum_occurrences["readAllApplicationGrants:::appID"]=0
operation_parameters_maximum_occurrences["readOneApplicationGrant:::envID"]=0
operation_parameters_maximum_occurrences["readOneApplicationGrant:::appID"]=0
operation_parameters_maximum_occurrences["readOneApplicationGrant:::grantID"]=0
operation_parameters_maximum_occurrences["updateApplicationGrant:::envID"]=0
operation_parameters_maximum_occurrences["updateApplicationGrant:::appID"]=0
operation_parameters_maximum_occurrences["updateApplicationGrant:::grantID"]=0
operation_parameters_maximum_occurrences["updateApplicationGrant:::ApplicationResourceGrant"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::roleAssignmentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::roleAssignmentID"]=0
operation_parameters_maximum_occurrences["readApplicationSecret:::envID"]=0
operation_parameters_maximum_occurrences["readApplicationSecret:::appID"]=0
operation_parameters_maximum_occurrences["updateApplicationSecret:::envID"]=0
operation_parameters_maximum_occurrences["updateApplicationSecret:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::SOPAssignmentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::SOPAssignmentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::appID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::SOPAssignmentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::body"]=0
operation_parameters_maximum_occurrences["createApplication:::envID"]=0
operation_parameters_maximum_occurrences["createApplication:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_maximum_occurrences["deleteApplication:::envID"]=0
operation_parameters_maximum_occurrences["deleteApplication:::appID"]=0
operation_parameters_maximum_occurrences["readAllApplications:::envID"]=0
operation_parameters_maximum_occurrences["readOneApplication:::envID"]=0
operation_parameters_maximum_occurrences["readOneApplication:::appID"]=0
operation_parameters_maximum_occurrences["updateApplication:::envID"]=0
operation_parameters_maximum_occurrences["updateApplication:::appID"]=0
operation_parameters_maximum_occurrences["updateApplication:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActivitiesActivityIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActivitiesActivityIDGet:::activityID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActivitiesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActivitiesGet:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActivitiesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDActivitiesPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::limit"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::samplePeriod"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::samplePeriodCount"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDApplicationSignonsGet:::filter"]=0
operation_parameters_maximum_occurrences["readOneBillOfMaterials:::envID"]=0
operation_parameters_maximum_occurrences["updateBillOfMaterials:::envID"]=0
operation_parameters_maximum_occurrences["updateBillOfMaterials:::BillOfMaterials"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDBrandingSettingsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDBrandingSettingsGet:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDBrandingSettingsPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDBrandingSettingsPut:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDBrandingSettingsPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesGet:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesPost:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::themeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::themeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDelete:::themeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDDelete:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDGet:::themeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDGet:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::themeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDThemesThemeIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCapabilitiesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDCapabilitiesGet:::orgID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet:::certID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDDelete:::certID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesCertIDGet:::certID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::usageType"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCertificatesPost:::file"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDDecryptionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDDecryptionsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEncryptionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEncryptionsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDApplicationsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDApplicationsGet:::keyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::keyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::keyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDDelete:::keyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDGet:::keyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDGet:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDPut:::keyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysKeyIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysPost:::usageType"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDKeysPost:::file"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSigningsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSigningsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDVerificationsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDVerificationsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDDelete:::domID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDGet:::domID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::domID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDCustomDomainsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::deviceAuthPolicyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet:::envID"]=0
operation_parameters_maximum_occurrences["createEnvironmentActiveLicense:::Environment"]=0
operation_parameters_maximum_occurrences["deleteEnvironment:::envID"]=0
operation_parameters_maximum_occurrences["readAllEnvironments:::limit"]=0
operation_parameters_maximum_occurrences["readAllEnvironments:::filter"]=0
operation_parameters_maximum_occurrences["readOneEnvironment:::envID"]=0
operation_parameters_maximum_occurrences["updateEnvironment:::envID"]=0
operation_parameters_maximum_occurrences["updateEnvironment:::Environment"]=0
operation_parameters_maximum_occurrences["updateEnvironmentType:::envID"]=0
operation_parameters_maximum_occurrences["updateEnvironmentType:::InlineObject2"]=0
operation_parameters_maximum_occurrences["createGatewayCredential:::envID"]=0
operation_parameters_maximum_occurrences["createGatewayCredential:::gatewayID"]=0
operation_parameters_maximum_occurrences["deleteGatewayCredential:::envID"]=0
operation_parameters_maximum_occurrences["deleteGatewayCredential:::gatewayID"]=0
operation_parameters_maximum_occurrences["deleteGatewayCredential:::credentialID"]=0
operation_parameters_maximum_occurrences["readAllGatewayInstances:::envID"]=0
operation_parameters_maximum_occurrences["readAllGatewayInstances:::gatewayID"]=0
operation_parameters_maximum_occurrences["readOneGatewayInstance:::envID"]=0
operation_parameters_maximum_occurrences["readOneGatewayInstance:::gatewayID"]=0
operation_parameters_maximum_occurrences["readOneGatewayInstance:::instanceID"]=0
operation_parameters_maximum_occurrences["createGatewayRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["createGatewayRoleAssignment:::gatewayID"]=0
operation_parameters_maximum_occurrences["createGatewayRoleAssignment:::RoleAssignment"]=0
operation_parameters_maximum_occurrences["deleteGatewayRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["deleteGatewayRoleAssignment:::gatewayID"]=0
operation_parameters_maximum_occurrences["deleteGatewayRoleAssignment:::gatewayRoleAssignmentID"]=0
operation_parameters_maximum_occurrences["readGatewayRoleAssignments:::envID"]=0
operation_parameters_maximum_occurrences["readGatewayRoleAssignments:::gatewayID"]=0
operation_parameters_maximum_occurrences["readOneGatewayRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["readOneGatewayRoleAssignment:::gatewayID"]=0
operation_parameters_maximum_occurrences["readOneGatewayRoleAssignment:::gatewayRoleAssignmentID"]=0
operation_parameters_maximum_occurrences["updateGatewayRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["updateGatewayRoleAssignment:::gatewayID"]=0
operation_parameters_maximum_occurrences["updateGatewayRoleAssignment:::gatewayRoleAssignmentID"]=0
operation_parameters_maximum_occurrences["updateGatewayRoleAssignment:::body"]=0
operation_parameters_maximum_occurrences["createGateway:::envID"]=0
operation_parameters_maximum_occurrences["createGateway:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_maximum_occurrences["deleteGateway:::envID"]=0
operation_parameters_maximum_occurrences["deleteGateway:::gatewayID"]=0
operation_parameters_maximum_occurrences["readAllGateways:::envID"]=0
operation_parameters_maximum_occurrences["readOneGateway:::envID"]=0
operation_parameters_maximum_occurrences["readOneGateway:::gatewayID"]=0
operation_parameters_maximum_occurrences["updateGateway:::envID"]=0
operation_parameters_maximum_occurrences["updateGateway:::gatewayID"]=0
operation_parameters_maximum_occurrences["updateGateway:::UNKNOWN_BASE_TYPE"]=0
operation_parameters_maximum_occurrences["createGroup:::envID"]=0
operation_parameters_maximum_occurrences["createGroup:::Group"]=0
operation_parameters_maximum_occurrences["deleteGroup:::envID"]=0
operation_parameters_maximum_occurrences["deleteGroup:::groupID"]=0
operation_parameters_maximum_occurrences["readAllGroups:::envID"]=0
operation_parameters_maximum_occurrences["readAllGroups:::filter"]=0
operation_parameters_maximum_occurrences["readAllGroups:::limit"]=0
operation_parameters_maximum_occurrences["readOneGroup:::envID"]=0
operation_parameters_maximum_occurrences["readOneGroup:::groupID"]=0
operation_parameters_maximum_occurrences["readOneGroup:::include"]=0
operation_parameters_maximum_occurrences["updateGroup:::envID"]=0
operation_parameters_maximum_occurrences["updateGroup:::groupID"]=0
operation_parameters_maximum_occurrences["updateGroup:::Group"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::mappingID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::mappingID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::mappingID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::ruleID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::ruleID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::planID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::planID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::planID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::previousRevisionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::planID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesGet:::Authorization"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::ruleID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::ruleID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::storeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataScimPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoreMetadataScimPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::storeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::storeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::Accept"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::storeID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::body"]=0
operation_parameters_maximum_occurrences["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::providerID"]=0
operation_parameters_maximum_occurrences["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::idpAttrID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::idpAttrID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::idpAttrID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDGet:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::providerID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesImgIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesImgIDDelete:::imgID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesImgIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesImgIDGet:::imgID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDImagesPost:::Content-Disposition"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDGet:::integrationID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet:::integrationID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::integrationID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::integrationVersionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::integrationID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::integrationVersionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::l10nStatusID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::l10nStatusID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::l10nStatusID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDDelete:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDGet:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::languageID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDLanguagesPost:::body"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesGet:::orgID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDGet:::orgID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDGet:::licenseID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNameGet:::orgID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNameGet:::licenseID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::orgID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::licenseID"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMfaSettingsDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMfaSettingsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMfaSettingsPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDMfaSettingsPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::contentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::contentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::contentID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTemplatesTemplateNameGet:::templateName"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet:::phoneDeliverySettingsId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::phoneDeliverySettingsId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet:::emailDomainID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::trustedEmailId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::trustedEmailId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::trustedEmailId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet:::emailDomainId"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDEmailDomainsPost:::body"]=0
operation_parameters_maximum_occurrences["v1OrganizationsOrgIDGet:::orgID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet:::passwordPolicyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::passwordPolicyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::body"]=0
operation_parameters_maximum_occurrences["createPopulation:::envID"]=0
operation_parameters_maximum_occurrences["createPopulation:::Population"]=0
operation_parameters_maximum_occurrences["deletePopulation:::envID"]=0
operation_parameters_maximum_occurrences["deletePopulation:::popID"]=0
operation_parameters_maximum_occurrences["readAllPopulations:::envID"]=0
operation_parameters_maximum_occurrences["readAllPopulations:::limit"]=0
operation_parameters_maximum_occurrences["readAllPopulations:::filter"]=0
operation_parameters_maximum_occurrences["readOnePopulation:::envID"]=0
operation_parameters_maximum_occurrences["readOnePopulation:::popID"]=0
operation_parameters_maximum_occurrences["updatePopulation:::envID"]=0
operation_parameters_maximum_occurrences["updatePopulation:::popID"]=0
operation_parameters_maximum_occurrences["updatePopulation:::Population"]=0
operation_parameters_maximum_occurrences["createResourceAttribute:::envID"]=0
operation_parameters_maximum_occurrences["createResourceAttribute:::resourceID"]=0
operation_parameters_maximum_occurrences["createResourceAttribute:::ResourceAttribute"]=0
operation_parameters_maximum_occurrences["deleteResourceAttribute:::envID"]=0
operation_parameters_maximum_occurrences["deleteResourceAttribute:::resourceID"]=0
operation_parameters_maximum_occurrences["deleteResourceAttribute:::resourceAttrID"]=0
operation_parameters_maximum_occurrences["readAllResourceAttributes:::envID"]=0
operation_parameters_maximum_occurrences["readAllResourceAttributes:::resourceID"]=0
operation_parameters_maximum_occurrences["readOneResourceAttribute:::envID"]=0
operation_parameters_maximum_occurrences["readOneResourceAttribute:::resourceID"]=0
operation_parameters_maximum_occurrences["readOneResourceAttribute:::resourceAttrID"]=0
operation_parameters_maximum_occurrences["updateResourceAttribute:::envID"]=0
operation_parameters_maximum_occurrences["updateResourceAttribute:::resourceID"]=0
operation_parameters_maximum_occurrences["updateResourceAttribute:::resourceAttrID"]=0
operation_parameters_maximum_occurrences["updateResourceAttribute:::ResourceAttribute"]=0
operation_parameters_maximum_occurrences["createResourceScope:::envID"]=0
operation_parameters_maximum_occurrences["createResourceScope:::resourceID"]=0
operation_parameters_maximum_occurrences["createResourceScope:::ResourceScope"]=0
operation_parameters_maximum_occurrences["deleteResourceScope:::envID"]=0
operation_parameters_maximum_occurrences["deleteResourceScope:::resourceID"]=0
operation_parameters_maximum_occurrences["deleteResourceScope:::scopeID"]=0
operation_parameters_maximum_occurrences["readAllResourceScopes:::envID"]=0
operation_parameters_maximum_occurrences["readAllResourceScopes:::resourceID"]=0
operation_parameters_maximum_occurrences["readOneResourceScope:::envID"]=0
operation_parameters_maximum_occurrences["readOneResourceScope:::resourceID"]=0
operation_parameters_maximum_occurrences["readOneResourceScope:::scopeID"]=0
operation_parameters_maximum_occurrences["updateResourceScope:::envID"]=0
operation_parameters_maximum_occurrences["updateResourceScope:::resourceID"]=0
operation_parameters_maximum_occurrences["updateResourceScope:::scopeID"]=0
operation_parameters_maximum_occurrences["updateResourceScope:::ResourceScope"]=0
operation_parameters_maximum_occurrences["createResource:::envID"]=0
operation_parameters_maximum_occurrences["createResource:::Resource"]=0
operation_parameters_maximum_occurrences["deleteResource:::envID"]=0
operation_parameters_maximum_occurrences["deleteResource:::resourceID"]=0
operation_parameters_maximum_occurrences["readAllResources:::envID"]=0
operation_parameters_maximum_occurrences["readOneResource:::envID"]=0
operation_parameters_maximum_occurrences["readOneResource:::resourceID"]=0
operation_parameters_maximum_occurrences["updateResource:::envID"]=0
operation_parameters_maximum_occurrences["updateResource:::resourceID"]=0
operation_parameters_maximum_occurrences["updateResource:::Resource"]=0
operation_parameters_maximum_occurrences["createRiskPredictor:::envID"]=0
operation_parameters_maximum_occurrences["createRiskPredictor:::RiskPredictor"]=0
operation_parameters_maximum_occurrences["deleteRiskAdvancedPredictor:::envID"]=0
operation_parameters_maximum_occurrences["deleteRiskAdvancedPredictor:::riskPredictorID"]=0
operation_parameters_maximum_occurrences["readAllRiskPredictors:::envID"]=0
operation_parameters_maximum_occurrences["readOneRiskPredictor:::envID"]=0
operation_parameters_maximum_occurrences["readOneRiskPredictor:::riskPredictorID"]=0
operation_parameters_maximum_occurrences["updateRiskPredictor:::envID"]=0
operation_parameters_maximum_occurrences["updateRiskPredictor:::riskPredictorID"]=0
operation_parameters_maximum_occurrences["updateRiskPredictor:::RiskPredictor"]=0
operation_parameters_maximum_occurrences["createRiskEvaluation:::envID"]=0
operation_parameters_maximum_occurrences["createRiskEvaluation:::RiskEvaluation"]=0
operation_parameters_maximum_occurrences["readOneRiskEvaluation:::envID"]=0
operation_parameters_maximum_occurrences["readOneRiskEvaluation:::riskID"]=0
operation_parameters_maximum_occurrences["updateRiskEvaluation:::envID"]=0
operation_parameters_maximum_occurrences["updateRiskEvaluation:::riskID"]=0
operation_parameters_maximum_occurrences["updateRiskEvaluation:::RiskEvaluationEvent"]=0
operation_parameters_maximum_occurrences["createRiskPolicySet:::envID"]=0
operation_parameters_maximum_occurrences["createRiskPolicySet:::RiskPolicySet"]=0
operation_parameters_maximum_occurrences["deleteRiskPolicySet:::envID"]=0
operation_parameters_maximum_occurrences["deleteRiskPolicySet:::riskPolicySetID"]=0
operation_parameters_maximum_occurrences["readOneRiskPolicySet:::envID"]=0
operation_parameters_maximum_occurrences["readOneRiskPolicySet:::riskPolicySetID"]=0
operation_parameters_maximum_occurrences["readRiskPolicySets:::envID"]=0
operation_parameters_maximum_occurrences["updateRiskPolicySet:::envID"]=0
operation_parameters_maximum_occurrences["updateRiskPolicySet:::riskPolicySetID"]=0
operation_parameters_maximum_occurrences["updateRiskPolicySet:::RiskPolicySet"]=0
operation_parameters_maximum_occurrences["readOneRole:::roleID"]=0
operation_parameters_maximum_occurrences["createAttribute:::envID"]=0
operation_parameters_maximum_occurrences["createAttribute:::schemaID"]=0
operation_parameters_maximum_occurrences["createAttribute:::SchemaAttribute"]=0
operation_parameters_maximum_occurrences["deleteAttribute:::envID"]=0
operation_parameters_maximum_occurrences["deleteAttribute:::schemaID"]=0
operation_parameters_maximum_occurrences["deleteAttribute:::attributeID"]=0
operation_parameters_maximum_occurrences["readAllSchemaAttributes:::envID"]=0
operation_parameters_maximum_occurrences["readAllSchemaAttributes:::schemaID"]=0
operation_parameters_maximum_occurrences["readAllSchemas:::envID"]=0
operation_parameters_maximum_occurrences["readOneAttribute:::envID"]=0
operation_parameters_maximum_occurrences["readOneAttribute:::schemaID"]=0
operation_parameters_maximum_occurrences["readOneAttribute:::attributeID"]=0
operation_parameters_maximum_occurrences["readOneSchema:::envID"]=0
operation_parameters_maximum_occurrences["readOneSchema:::schemaID"]=0
operation_parameters_maximum_occurrences["updateAttributePatch:::envID"]=0
operation_parameters_maximum_occurrences["updateAttributePatch:::schemaID"]=0
operation_parameters_maximum_occurrences["updateAttributePatch:::attributeID"]=0
operation_parameters_maximum_occurrences["updateAttributePatch:::SchemaAttribute"]=0
operation_parameters_maximum_occurrences["updateAttributePut:::envID"]=0
operation_parameters_maximum_occurrences["updateAttributePut:::schemaID"]=0
operation_parameters_maximum_occurrences["updateAttributePut:::attributeID"]=0
operation_parameters_maximum_occurrences["updateAttributePut:::SchemaAttribute"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPost:::body"]=0
operation_parameters_maximum_occurrences["v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost:::policyID"]=0
operation_parameters_maximum_occurrences["v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::actionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::actionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::actionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::policyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete:::subscriptionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet:::subscriptionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::subscriptionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTotalIdentitiesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDTotalIdentitiesGet:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUserActivitiesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUserActivitiesGet:::filter"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::body"]=0
operation_parameters_maximum_occurrences["addUserToGroup:::envID"]=0
operation_parameters_maximum_occurrences["addUserToGroup:::userID"]=0
operation_parameters_maximum_occurrences["addUserToGroup:::InlineObject3"]=0
operation_parameters_maximum_occurrences["readAllGroupMembershipsForUser:::envID"]=0
operation_parameters_maximum_occurrences["readAllGroupMembershipsForUser:::userID"]=0
operation_parameters_maximum_occurrences["readAllGroupMembershipsForUser:::expand"]=0
operation_parameters_maximum_occurrences["readAllGroupMembershipsForUser:::limit"]=0
operation_parameters_maximum_occurrences["readAllGroupMembershipsForUser:::filter"]=0
operation_parameters_maximum_occurrences["readOneGroupMembershipForUser:::envID"]=0
operation_parameters_maximum_occurrences["readOneGroupMembershipForUser:::userID"]=0
operation_parameters_maximum_occurrences["readOneGroupMembershipForUser:::groupID"]=0
operation_parameters_maximum_occurrences["readOneGroupMembershipForUser:::expand"]=0
operation_parameters_maximum_occurrences["removeUserFromGroup:::envID"]=0
operation_parameters_maximum_occurrences["removeUserFromGroup:::userID"]=0
operation_parameters_maximum_occurrences["removeUserFromGroup:::groupID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::linkedAccountID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::linkedAccountID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::deviceID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::deviceID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::deviceID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::deviceID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::deviceID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::pairingKeyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::pairingKeyID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::sessionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::sessionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPost:::content-type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::agreementID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::transactionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::transactionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::transactionID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::content-type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::Content-Type"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::body"]=0
operation_parameters_maximum_occurrences["createUserRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["createUserRoleAssignment:::userID"]=0
operation_parameters_maximum_occurrences["createUserRoleAssignment:::RoleAssignment"]=0
operation_parameters_maximum_occurrences["deleteUserRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["deleteUserRoleAssignment:::userID"]=0
operation_parameters_maximum_occurrences["deleteUserRoleAssignment:::roleAssignmentID"]=0
operation_parameters_maximum_occurrences["readOneRoleAssignment:::envID"]=0
operation_parameters_maximum_occurrences["readOneRoleAssignment:::userID"]=0
operation_parameters_maximum_occurrences["readOneRoleAssignment:::roleAssignmentID"]=0
operation_parameters_maximum_occurrences["readUserRoleAssignments:::envID"]=0
operation_parameters_maximum_occurrences["readUserRoleAssignments:::userID"]=0
operation_parameters_maximum_occurrences["createUser:::envID"]=0
operation_parameters_maximum_occurrences["createUser:::content-type"]=0
operation_parameters_maximum_occurrences["createUser:::User"]=0
operation_parameters_maximum_occurrences["deleteUser:::envID"]=0
operation_parameters_maximum_occurrences["deleteUser:::userID"]=0
operation_parameters_maximum_occurrences["readAllUsers:::envID"]=0
operation_parameters_maximum_occurrences["readAllUsers:::filter"]=0
operation_parameters_maximum_occurrences["readAllUsers:::limit"]=0
operation_parameters_maximum_occurrences["readUser:::envID"]=0
operation_parameters_maximum_occurrences["readUser:::userID"]=0
operation_parameters_maximum_occurrences["readUser:::include"]=0
operation_parameters_maximum_occurrences["updateUserPatch:::envID"]=0
operation_parameters_maximum_occurrences["updateUserPatch:::userID"]=0
operation_parameters_maximum_occurrences["updateUserPatch:::User"]=0
operation_parameters_maximum_occurrences["updateUserPut:::envID"]=0
operation_parameters_maximum_occurrences["updateUserPut:::userID"]=0
operation_parameters_maximum_occurrences["updateUserPut:::User"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::body"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::envID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::userID"]=0
operation_parameters_maximum_occurrences["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::body"]=0

##
# The type of collection for specifying multiple values for parameter:
# - multi, csv, ssv, tsv
declare -A operation_parameters_collection_type
operation_parameters_collection_type["v1EnvironmentsEnvIDActiveIdentityCountsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActiveIdentityCountsGet:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActiveIdentityCountsGet:::limit"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActiveIdentityCountsGet:::order"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::limit"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::order"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet:::samplePeriod"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::orgID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::licenseID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::aggregatedBy"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::limit"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet:::order"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet:::revisionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDDelete:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDGet:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsAgreementIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAgreementsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::alertChannelID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete:::alertChannelsID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDAlertChannelsPost:::body"]=""
operation_parameters_collection_type["createApplicationAttributeMapping:::envID"]=""
operation_parameters_collection_type["createApplicationAttributeMapping:::appID"]=""
operation_parameters_collection_type["createApplicationAttributeMapping:::ApplicationAttributeMapping"]=""
operation_parameters_collection_type["deleteApplicationAttributeMapping:::envID"]=""
operation_parameters_collection_type["deleteApplicationAttributeMapping:::appID"]=""
operation_parameters_collection_type["deleteApplicationAttributeMapping:::attrMappingID"]=""
operation_parameters_collection_type["readAllApplicationAttributeMappings:::envID"]=""
operation_parameters_collection_type["readAllApplicationAttributeMappings:::appID"]=""
operation_parameters_collection_type["readOneApplicationAttributeMapping:::envID"]=""
operation_parameters_collection_type["readOneApplicationAttributeMapping:::appID"]=""
operation_parameters_collection_type["readOneApplicationAttributeMapping:::attrMappingID"]=""
operation_parameters_collection_type["updateApplicationAttributeMapping:::envID"]=""
operation_parameters_collection_type["updateApplicationAttributeMapping:::appID"]=""
operation_parameters_collection_type["updateApplicationAttributeMapping:::attrMappingID"]=""
operation_parameters_collection_type["updateApplicationAttributeMapping:::ApplicationAttributeMapping"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::pushCredID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet:::pushCredID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::pushCredID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut:::body"]=""
operation_parameters_collection_type["createApplicationGrant:::envID"]=""
operation_parameters_collection_type["createApplicationGrant:::appID"]=""
operation_parameters_collection_type["createApplicationGrant:::ApplicationResourceGrant"]=""
operation_parameters_collection_type["deleteApplicationGrant:::envID"]=""
operation_parameters_collection_type["deleteApplicationGrant:::appID"]=""
operation_parameters_collection_type["deleteApplicationGrant:::grantID"]=""
operation_parameters_collection_type["readAllApplicationGrants:::envID"]=""
operation_parameters_collection_type["readAllApplicationGrants:::appID"]=""
operation_parameters_collection_type["readOneApplicationGrant:::envID"]=""
operation_parameters_collection_type["readOneApplicationGrant:::appID"]=""
operation_parameters_collection_type["readOneApplicationGrant:::grantID"]=""
operation_parameters_collection_type["updateApplicationGrant:::envID"]=""
operation_parameters_collection_type["updateApplicationGrant:::appID"]=""
operation_parameters_collection_type["updateApplicationGrant:::grantID"]=""
operation_parameters_collection_type["updateApplicationGrant:::ApplicationResourceGrant"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete:::roleAssignmentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet:::roleAssignmentID"]=""
operation_parameters_collection_type["readApplicationSecret:::envID"]=""
operation_parameters_collection_type["readApplicationSecret:::appID"]=""
operation_parameters_collection_type["updateApplicationSecret:::envID"]=""
operation_parameters_collection_type["updateApplicationSecret:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete:::SOPAssignmentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet:::SOPAssignmentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::appID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::SOPAssignmentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut:::body"]=""
operation_parameters_collection_type["createApplication:::envID"]=""
operation_parameters_collection_type["createApplication:::UNKNOWN_BASE_TYPE"]=""
operation_parameters_collection_type["deleteApplication:::envID"]=""
operation_parameters_collection_type["deleteApplication:::appID"]=""
operation_parameters_collection_type["readAllApplications:::envID"]=""
operation_parameters_collection_type["readOneApplication:::envID"]=""
operation_parameters_collection_type["readOneApplication:::appID"]=""
operation_parameters_collection_type["updateApplication:::envID"]=""
operation_parameters_collection_type["updateApplication:::appID"]=""
operation_parameters_collection_type["updateApplication:::UNKNOWN_BASE_TYPE"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActivitiesActivityIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActivitiesActivityIDGet:::activityID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActivitiesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActivitiesGet:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActivitiesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDActivitiesPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationSignonsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationSignonsGet:::limit"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationSignonsGet:::samplePeriod"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationSignonsGet:::samplePeriodCount"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDApplicationSignonsGet:::filter"]=""
operation_parameters_collection_type["readOneBillOfMaterials:::envID"]=""
operation_parameters_collection_type["updateBillOfMaterials:::envID"]=""
operation_parameters_collection_type["updateBillOfMaterials:::BillOfMaterials"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDBrandingSettingsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDBrandingSettingsGet:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDBrandingSettingsPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDBrandingSettingsPut:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDBrandingSettingsPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesGet:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesPost:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::themeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultGet:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::themeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDefaultPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDelete:::themeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDDelete:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDGet:::themeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDGet:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDPut:::themeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDPut:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDPut:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDThemesThemeIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCapabilitiesGet:::envID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDCapabilitiesGet:::orgID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet:::certID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesCertIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesCertIDDelete:::certID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesCertIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesCertIDGet:::certID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesPost:::usageType"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCertificatesPost:::file"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDDecryptionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDDecryptionsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEncryptionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEncryptionsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDApplicationsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDApplicationsGet:::keyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::keyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDCsrGet:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::keyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDCsrPut:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDDelete:::keyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDGet:::keyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDGet:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDPut:::keyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysKeyIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysPost:::usageType"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDKeysPost:::file"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSigningsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSigningsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDVerificationsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDVerificationsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDDelete:::domID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDGet:::domID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::domID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsDomIDPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDCustomDomainsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::deviceAuthPolicyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet:::envID"]=""
operation_parameters_collection_type["createEnvironmentActiveLicense:::Environment"]=""
operation_parameters_collection_type["deleteEnvironment:::envID"]=""
operation_parameters_collection_type["readAllEnvironments:::limit"]=""
operation_parameters_collection_type["readAllEnvironments:::filter"]=""
operation_parameters_collection_type["readOneEnvironment:::envID"]=""
operation_parameters_collection_type["updateEnvironment:::envID"]=""
operation_parameters_collection_type["updateEnvironment:::Environment"]=""
operation_parameters_collection_type["updateEnvironmentType:::envID"]=""
operation_parameters_collection_type["updateEnvironmentType:::InlineObject2"]=""
operation_parameters_collection_type["createGatewayCredential:::envID"]=""
operation_parameters_collection_type["createGatewayCredential:::gatewayID"]=""
operation_parameters_collection_type["deleteGatewayCredential:::envID"]=""
operation_parameters_collection_type["deleteGatewayCredential:::gatewayID"]=""
operation_parameters_collection_type["deleteGatewayCredential:::credentialID"]=""
operation_parameters_collection_type["readAllGatewayInstances:::envID"]=""
operation_parameters_collection_type["readAllGatewayInstances:::gatewayID"]=""
operation_parameters_collection_type["readOneGatewayInstance:::envID"]=""
operation_parameters_collection_type["readOneGatewayInstance:::gatewayID"]=""
operation_parameters_collection_type["readOneGatewayInstance:::instanceID"]=""
operation_parameters_collection_type["createGatewayRoleAssignment:::envID"]=""
operation_parameters_collection_type["createGatewayRoleAssignment:::gatewayID"]=""
operation_parameters_collection_type["createGatewayRoleAssignment:::RoleAssignment"]=""
operation_parameters_collection_type["deleteGatewayRoleAssignment:::envID"]=""
operation_parameters_collection_type["deleteGatewayRoleAssignment:::gatewayID"]=""
operation_parameters_collection_type["deleteGatewayRoleAssignment:::gatewayRoleAssignmentID"]=""
operation_parameters_collection_type["readGatewayRoleAssignments:::envID"]=""
operation_parameters_collection_type["readGatewayRoleAssignments:::gatewayID"]=""
operation_parameters_collection_type["readOneGatewayRoleAssignment:::envID"]=""
operation_parameters_collection_type["readOneGatewayRoleAssignment:::gatewayID"]=""
operation_parameters_collection_type["readOneGatewayRoleAssignment:::gatewayRoleAssignmentID"]=""
operation_parameters_collection_type["updateGatewayRoleAssignment:::envID"]=""
operation_parameters_collection_type["updateGatewayRoleAssignment:::gatewayID"]=""
operation_parameters_collection_type["updateGatewayRoleAssignment:::gatewayRoleAssignmentID"]=""
operation_parameters_collection_type["updateGatewayRoleAssignment:::body"]=""
operation_parameters_collection_type["createGateway:::envID"]=""
operation_parameters_collection_type["createGateway:::UNKNOWN_BASE_TYPE"]=""
operation_parameters_collection_type["deleteGateway:::envID"]=""
operation_parameters_collection_type["deleteGateway:::gatewayID"]=""
operation_parameters_collection_type["readAllGateways:::envID"]=""
operation_parameters_collection_type["readOneGateway:::envID"]=""
operation_parameters_collection_type["readOneGateway:::gatewayID"]=""
operation_parameters_collection_type["updateGateway:::envID"]=""
operation_parameters_collection_type["updateGateway:::gatewayID"]=""
operation_parameters_collection_type["updateGateway:::UNKNOWN_BASE_TYPE"]=""
operation_parameters_collection_type["createGroup:::envID"]=""
operation_parameters_collection_type["createGroup:::Group"]=""
operation_parameters_collection_type["deleteGroup:::envID"]=""
operation_parameters_collection_type["deleteGroup:::groupID"]=""
operation_parameters_collection_type["readAllGroups:::envID"]=""
operation_parameters_collection_type["readAllGroups:::filter"]=""
operation_parameters_collection_type["readAllGroups:::limit"]=""
operation_parameters_collection_type["readOneGroup:::envID"]=""
operation_parameters_collection_type["readOneGroup:::groupID"]=""
operation_parameters_collection_type["readOneGroup:::include"]=""
operation_parameters_collection_type["updateGroup:::envID"]=""
operation_parameters_collection_type["updateGroup:::groupID"]=""
operation_parameters_collection_type["updateGroup:::Group"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::mappingID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingMappingIDDelete:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::mappingID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingsMappingIDGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::mappingID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationMappingsMappingIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::ruleID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::ruleID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::planID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDDelete:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::planID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::planID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRevisionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::previousRevisionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::planID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesGet:::Authorization"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::ruleID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDDelete:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::ruleID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesRuleIDGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::storeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationRulesStoreIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataScimPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoreMetadataScimPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::storeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDDelete:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::storeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDGet:::Accept"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::storeID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPropagationStoresStoreIDPut:::body"]=""
operation_parameters_collection_type["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::envID"]=""
operation_parameters_collection_type["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::providerID"]=""
operation_parameters_collection_type["v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete:::idpAttrID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet:::idpAttrID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::idpAttrID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDGet:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::providerID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIdentityProvidersProviderIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesImgIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesImgIDDelete:::imgID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesImgIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesImgIDGet:::imgID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDImagesPost:::Content-Disposition"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDGet:::integrationID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet:::integrationID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::integrationID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet:::integrationVersionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::integrationID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet:::integrationVersionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete:::l10nStatusID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet:::l10nStatusID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::l10nStatusID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDDelete:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDGet:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::languageID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesLanguageIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDLanguagesPost:::body"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesGet:::orgID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDGet:::orgID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDGet:::licenseID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDNameGet:::orgID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDNameGet:::licenseID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::orgID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::licenseID"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDLicensesLicenseIDNamePut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMfaSettingsDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMfaSettingsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMfaSettingsPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDMfaSettingsPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete:::contentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet:::contentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::contentID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTemplatesTemplateNameGet:::templateName"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet:::phoneDeliverySettingsId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::phoneDeliverySettingsId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet:::emailDomainID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete:::trustedEmailId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet:::trustedEmailId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::trustedEmailId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet:::emailDomainId"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDEmailDomainsPost:::body"]=""
operation_parameters_collection_type["v1OrganizationsOrgIDGet:::orgID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPasswordPoliciesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet:::passwordPolicyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::passwordPolicyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut:::body"]=""
operation_parameters_collection_type["createPopulation:::envID"]=""
operation_parameters_collection_type["createPopulation:::Population"]=""
operation_parameters_collection_type["deletePopulation:::envID"]=""
operation_parameters_collection_type["deletePopulation:::popID"]=""
operation_parameters_collection_type["readAllPopulations:::envID"]=""
operation_parameters_collection_type["readAllPopulations:::limit"]=""
operation_parameters_collection_type["readAllPopulations:::filter"]=""
operation_parameters_collection_type["readOnePopulation:::envID"]=""
operation_parameters_collection_type["readOnePopulation:::popID"]=""
operation_parameters_collection_type["updatePopulation:::envID"]=""
operation_parameters_collection_type["updatePopulation:::popID"]=""
operation_parameters_collection_type["updatePopulation:::Population"]=""
operation_parameters_collection_type["createResourceAttribute:::envID"]=""
operation_parameters_collection_type["createResourceAttribute:::resourceID"]=""
operation_parameters_collection_type["createResourceAttribute:::ResourceAttribute"]=""
operation_parameters_collection_type["deleteResourceAttribute:::envID"]=""
operation_parameters_collection_type["deleteResourceAttribute:::resourceID"]=""
operation_parameters_collection_type["deleteResourceAttribute:::resourceAttrID"]=""
operation_parameters_collection_type["readAllResourceAttributes:::envID"]=""
operation_parameters_collection_type["readAllResourceAttributes:::resourceID"]=""
operation_parameters_collection_type["readOneResourceAttribute:::envID"]=""
operation_parameters_collection_type["readOneResourceAttribute:::resourceID"]=""
operation_parameters_collection_type["readOneResourceAttribute:::resourceAttrID"]=""
operation_parameters_collection_type["updateResourceAttribute:::envID"]=""
operation_parameters_collection_type["updateResourceAttribute:::resourceID"]=""
operation_parameters_collection_type["updateResourceAttribute:::resourceAttrID"]=""
operation_parameters_collection_type["updateResourceAttribute:::ResourceAttribute"]=""
operation_parameters_collection_type["createResourceScope:::envID"]=""
operation_parameters_collection_type["createResourceScope:::resourceID"]=""
operation_parameters_collection_type["createResourceScope:::ResourceScope"]=""
operation_parameters_collection_type["deleteResourceScope:::envID"]=""
operation_parameters_collection_type["deleteResourceScope:::resourceID"]=""
operation_parameters_collection_type["deleteResourceScope:::scopeID"]=""
operation_parameters_collection_type["readAllResourceScopes:::envID"]=""
operation_parameters_collection_type["readAllResourceScopes:::resourceID"]=""
operation_parameters_collection_type["readOneResourceScope:::envID"]=""
operation_parameters_collection_type["readOneResourceScope:::resourceID"]=""
operation_parameters_collection_type["readOneResourceScope:::scopeID"]=""
operation_parameters_collection_type["updateResourceScope:::envID"]=""
operation_parameters_collection_type["updateResourceScope:::resourceID"]=""
operation_parameters_collection_type["updateResourceScope:::scopeID"]=""
operation_parameters_collection_type["updateResourceScope:::ResourceScope"]=""
operation_parameters_collection_type["createResource:::envID"]=""
operation_parameters_collection_type["createResource:::Resource"]=""
operation_parameters_collection_type["deleteResource:::envID"]=""
operation_parameters_collection_type["deleteResource:::resourceID"]=""
operation_parameters_collection_type["readAllResources:::envID"]=""
operation_parameters_collection_type["readOneResource:::envID"]=""
operation_parameters_collection_type["readOneResource:::resourceID"]=""
operation_parameters_collection_type["updateResource:::envID"]=""
operation_parameters_collection_type["updateResource:::resourceID"]=""
operation_parameters_collection_type["updateResource:::Resource"]=""
operation_parameters_collection_type["createRiskPredictor:::envID"]=""
operation_parameters_collection_type["createRiskPredictor:::RiskPredictor"]=""
operation_parameters_collection_type["deleteRiskAdvancedPredictor:::envID"]=""
operation_parameters_collection_type["deleteRiskAdvancedPredictor:::riskPredictorID"]=""
operation_parameters_collection_type["readAllRiskPredictors:::envID"]=""
operation_parameters_collection_type["readOneRiskPredictor:::envID"]=""
operation_parameters_collection_type["readOneRiskPredictor:::riskPredictorID"]=""
operation_parameters_collection_type["updateRiskPredictor:::envID"]=""
operation_parameters_collection_type["updateRiskPredictor:::riskPredictorID"]=""
operation_parameters_collection_type["updateRiskPredictor:::RiskPredictor"]=""
operation_parameters_collection_type["createRiskEvaluation:::envID"]=""
operation_parameters_collection_type["createRiskEvaluation:::RiskEvaluation"]=""
operation_parameters_collection_type["readOneRiskEvaluation:::envID"]=""
operation_parameters_collection_type["readOneRiskEvaluation:::riskID"]=""
operation_parameters_collection_type["updateRiskEvaluation:::envID"]=""
operation_parameters_collection_type["updateRiskEvaluation:::riskID"]=""
operation_parameters_collection_type["updateRiskEvaluation:::RiskEvaluationEvent"]=""
operation_parameters_collection_type["createRiskPolicySet:::envID"]=""
operation_parameters_collection_type["createRiskPolicySet:::RiskPolicySet"]=""
operation_parameters_collection_type["deleteRiskPolicySet:::envID"]=""
operation_parameters_collection_type["deleteRiskPolicySet:::riskPolicySetID"]=""
operation_parameters_collection_type["readOneRiskPolicySet:::envID"]=""
operation_parameters_collection_type["readOneRiskPolicySet:::riskPolicySetID"]=""
operation_parameters_collection_type["readRiskPolicySets:::envID"]=""
operation_parameters_collection_type["updateRiskPolicySet:::envID"]=""
operation_parameters_collection_type["updateRiskPolicySet:::riskPolicySetID"]=""
operation_parameters_collection_type["updateRiskPolicySet:::RiskPolicySet"]=""
operation_parameters_collection_type["readOneRole:::roleID"]=""
operation_parameters_collection_type["createAttribute:::envID"]=""
operation_parameters_collection_type["createAttribute:::schemaID"]=""
operation_parameters_collection_type["createAttribute:::SchemaAttribute"]=""
operation_parameters_collection_type["deleteAttribute:::envID"]=""
operation_parameters_collection_type["deleteAttribute:::schemaID"]=""
operation_parameters_collection_type["deleteAttribute:::attributeID"]=""
operation_parameters_collection_type["readAllSchemaAttributes:::envID"]=""
operation_parameters_collection_type["readAllSchemaAttributes:::schemaID"]=""
operation_parameters_collection_type["readAllSchemas:::envID"]=""
operation_parameters_collection_type["readOneAttribute:::envID"]=""
operation_parameters_collection_type["readOneAttribute:::schemaID"]=""
operation_parameters_collection_type["readOneAttribute:::attributeID"]=""
operation_parameters_collection_type["readOneSchema:::envID"]=""
operation_parameters_collection_type["readOneSchema:::schemaID"]=""
operation_parameters_collection_type["updateAttributePatch:::envID"]=""
operation_parameters_collection_type["updateAttributePatch:::schemaID"]=""
operation_parameters_collection_type["updateAttributePatch:::attributeID"]=""
operation_parameters_collection_type["updateAttributePatch:::SchemaAttribute"]=""
operation_parameters_collection_type["updateAttributePut:::envID"]=""
operation_parameters_collection_type["updateAttributePut:::schemaID"]=""
operation_parameters_collection_type["updateAttributePut:::attributeID"]=""
operation_parameters_collection_type["updateAttributePut:::SchemaAttribute"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPost:::body"]=""
operation_parameters_collection_type["v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost:::policyID"]=""
operation_parameters_collection_type["v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete:::actionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet:::actionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::actionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::policyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete:::subscriptionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet:::subscriptionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::subscriptionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTotalIdentitiesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDTotalIdentitiesGet:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUserActivitiesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUserActivitiesGet:::filter"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDEnabledGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDEnabledGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDEnabledPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut:::body"]=""
operation_parameters_collection_type["addUserToGroup:::envID"]=""
operation_parameters_collection_type["addUserToGroup:::userID"]=""
operation_parameters_collection_type["addUserToGroup:::InlineObject3"]=""
operation_parameters_collection_type["readAllGroupMembershipsForUser:::envID"]=""
operation_parameters_collection_type["readAllGroupMembershipsForUser:::userID"]=""
operation_parameters_collection_type["readAllGroupMembershipsForUser:::expand"]=""
operation_parameters_collection_type["readAllGroupMembershipsForUser:::limit"]=""
operation_parameters_collection_type["readAllGroupMembershipsForUser:::filter"]=""
operation_parameters_collection_type["readOneGroupMembershipForUser:::envID"]=""
operation_parameters_collection_type["readOneGroupMembershipForUser:::userID"]=""
operation_parameters_collection_type["readOneGroupMembershipForUser:::groupID"]=""
operation_parameters_collection_type["readOneGroupMembershipForUser:::expand"]=""
operation_parameters_collection_type["removeUserFromGroup:::envID"]=""
operation_parameters_collection_type["removeUserFromGroup:::userID"]=""
operation_parameters_collection_type["removeUserFromGroup:::groupID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete:::linkedAccountID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet:::linkedAccountID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDelete:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete:::deviceID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet:::deviceID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::deviceID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::deviceID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::deviceID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDDevicesPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete:::pairingKeyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet:::pairingKeyID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPairingKeysPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete:::sessionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet:::sessionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPost:::content-type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::agreementID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete:::transactionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet:::transactionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::transactionID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::content-type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPost:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::Content-Type"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPasswordPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPopulationGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPopulationGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDPopulationPut:::body"]=""
operation_parameters_collection_type["createUserRoleAssignment:::envID"]=""
operation_parameters_collection_type["createUserRoleAssignment:::userID"]=""
operation_parameters_collection_type["createUserRoleAssignment:::RoleAssignment"]=""
operation_parameters_collection_type["deleteUserRoleAssignment:::envID"]=""
operation_parameters_collection_type["deleteUserRoleAssignment:::userID"]=""
operation_parameters_collection_type["deleteUserRoleAssignment:::roleAssignmentID"]=""
operation_parameters_collection_type["readOneRoleAssignment:::envID"]=""
operation_parameters_collection_type["readOneRoleAssignment:::userID"]=""
operation_parameters_collection_type["readOneRoleAssignment:::roleAssignmentID"]=""
operation_parameters_collection_type["readUserRoleAssignments:::envID"]=""
operation_parameters_collection_type["readUserRoleAssignments:::userID"]=""
operation_parameters_collection_type["createUser:::envID"]=""
operation_parameters_collection_type["createUser:::content-type"]=""
operation_parameters_collection_type["createUser:::User"]=""
operation_parameters_collection_type["deleteUser:::envID"]=""
operation_parameters_collection_type["deleteUser:::userID"]=""
operation_parameters_collection_type["readAllUsers:::envID"]=""
operation_parameters_collection_type["readAllUsers:::filter"]=""
operation_parameters_collection_type["readAllUsers:::limit"]=""
operation_parameters_collection_type["readUser:::envID"]=""
operation_parameters_collection_type["readUser:::userID"]=""
operation_parameters_collection_type["readUser:::include"]=""
operation_parameters_collection_type["updateUserPatch:::envID"]=""
operation_parameters_collection_type["updateUserPatch:::userID"]=""
operation_parameters_collection_type["updateUserPatch:::User"]=""
operation_parameters_collection_type["updateUserPut:::envID"]=""
operation_parameters_collection_type["updateUserPut:::userID"]=""
operation_parameters_collection_type["updateUserPut:::User"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut:::body"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::envID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::userID"]=""
operation_parameters_collection_type["v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut:::body"]=""


##
# Map for body parameters passed after operation as
# PARAMETER==STRING_VALUE or PARAMETER:=NUMERIC_VALUE
# These will be mapped to top level json keys ( { "PARAMETER": "VALUE" })
declare -A body_parameters

##
# These arguments will be directly passed to cURL
curl_arguments=""

##
# The host for making the request
host=""

##
# The user credentials for basic authentication
basic_auth_credential=""


##
# If true, the script will only output the actual cURL command that would be
# used
print_curl=false

##
# The operation ID passed on the command line
operation=""

##
# The provided Accept header value
header_accept=""

##
# The provided Content-type header value
header_content_type=""

##
# If there is any body content on the stdin pass it to the body of the request
body_content_temp_file=""

##
# If this variable is set to true, the request will be performed even
# if parameters for required query, header or body values are not provided
# (path parameters are still required).
force=false

##
# Declare some mime types abbreviations for easier content-type and accepts
# headers specification
declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


##############################################################################
#
# Escape special URL characters
# Based on table at http://www.w3schools.com/tags/ref_urlencode.asp
#
##############################################################################
url_escape() {
    local raw_url="$1"

    value=$(sed -e 's/ /%20/g' \
       -e 's/!/%21/g' \
       -e 's/"/%22/g' \
       -e 's/#/%23/g' \
       -e 's/\&/%26/g' \
       -e 's/'\''/%28/g' \
       -e 's/(/%28/g' \
       -e 's/)/%29/g' \
       -e 's/:/%3A/g' \
       -e 's/\\t/%09/g' \
       -e 's/?/%3F/g' <<<"$raw_url");

    echo "$value"
}

##############################################################################
#
# Lookup the mime type abbreviation in the mime_type_abbreviations array.
# If not present assume the user provided a valid mime type
#
##############################################################################
lookup_mime_type() {
    local mime_type="$1"

    if [[ ${mime_type_abbreviations[$mime_type]} ]]; then
        echo "${mime_type_abbreviations[$mime_type]}"
    else
        echo "$mime_type"
    fi
}

##############################################################################
#
# Converts an associative array into a list of cURL header
# arguments (-H "KEY: VALUE")
#
##############################################################################
header_arguments_to_curl() {
    local headers_curl=""

    for key in "${!header_arguments[@]}"; do
        headers_curl+="-H \"${key}: ${header_arguments[${key}]}\" "
    done
    headers_curl+=" "

    echo "${headers_curl}"
}

##############################################################################
#
# Converts an associative array into a simple JSON with keys as top
# level object attributes
#
# \todo Add conversion of more complex attributes using paths
#
##############################################################################
body_parameters_to_json() {
    local body_json="-d '{"
    local count=0
    for key in "${!body_parameters[@]}"; do
        if [[ $((count++)) -gt 0 ]]; then
            body_json+=", "
        fi
        body_json+="\"${key}\": ${body_parameters[${key}]}"
    done
    body_json+="}'"

    if [[ "${#body_parameters[@]}" -eq 0 ]]; then
        echo ""
    else
        echo "${body_json}"
    fi
}

##############################################################################
#
# Helper method for showing error because for example echo in
# build_request_path() is evaluated as part of command line not printed on
# output. Anyway better idea for resource clean up ;-).
#
##############################################################################
ERROR_MSG=""
function finish {
    if [[ -n "$ERROR_MSG" ]]; then
        echo >&2 "${OFF}${RED}$ERROR_MSG"
        echo >&2 "${OFF}Check usage: '${script_name} --help'"
    fi
}
trap finish EXIT


##############################################################################
#
# Validate and build request path including query parameters
#
##############################################################################
build_request_path() {
    local path_template=$1
    local -n path_params=$2
    local -n query_params=$3


    #
    # Check input parameters count against minimum and maximum required
    #
    if [[ "$force" = false ]]; then
        local was_error=""
        for qparam in "${query_params[@]}" "${path_params[@]}"; do
            local parameter_values
            mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")

            #
            # Check if the number of provided values is not less than minimum required
            #
            if [[ ${#parameter_values[@]} -lt ${operation_parameters_minimum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too few values provided for '${qparam}' parameter."
                was_error=true
            fi

            #
            # Check if the number of provided values is not more than maximum
            #
            if [[ ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} -gt 0 \
                  && ${#parameter_values[@]} -gt ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too many values provided for '${qparam}' parameter"
                was_error=true
            fi
        done
        if [[ -n "$was_error" ]]; then
            exit 1
        fi
    fi

    # First replace all path parameters in the path
    for pparam in "${path_params[@]}"; do
        local path_regex="(.*)(\\{$pparam\\})(.*)"
        if [[ $path_template =~ $path_regex ]]; then
            path_template=${BASH_REMATCH[1]}${operation_parameters[$pparam]}${BASH_REMATCH[3]}
        fi
    done

    local query_request_part=""

    for qparam in "${query_params[@]}"; do
        if [[ "${operation_parameters[$qparam]}" == "" ]]; then
            continue
        fi

        # Get the array of parameter values
        local parameter_value=""
        local parameter_values
        mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")



        #
        # Append parameters without specific cardinality
        #
        local collection_type="${operation_parameters_collection_type["${operation}:::${qparam}"]}"
        if [[ "${collection_type}" == "" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'mutli' collections i.e. param=value1&param=value2&...
        #
        elif [[ "${collection_type}" == "multi" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'csv' collections i.e. param=value1,value2,...
        #
        elif [[ "${collection_type}" == "csv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=","
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'ssv' collections i.e. param="value1 value2 ..."
        #
        elif [[ "${collection_type}" == "ssv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=" "
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'tsv' collections i.e. param="value1\tvalue2\t..."
        #
        elif [[ "${collection_type}" == "tsv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="\\t"
                fi
                parameter_value+="${qvalue}"
            done
        else
            echo "Unsupported collection format \"${collection_type}\""
            exit 1
        fi

        if [[ -n "${parameter_value}" ]]; then
            if [[ -n "${query_request_part}" ]]; then
                query_request_part+="&"
            fi
            query_request_part+="${parameter_value}"
        fi

    done


    # Now append query parameters - if any
    if [[ -n "${query_request_part}" ]]; then
        path_template+="?${query_request_part}"
    fi

    echo "$path_template"
}



###############################################################################
#
# Print main help message
#
###############################################################################
print_help() {
cat <<EOF

${BOLD}${WHITE}PingOne Platform API - Management command line client (API version 1.0.0)${OFF}

${BOLD}${WHITE}Usage${OFF}

  ${GREEN}${script_name}${OFF} [-h|--help] [-V|--version] [--about] [${RED}<curl-options>${OFF}]
           [-ac|--accept ${GREEN}<mime-type>${OFF}] [-ct,--content-type ${GREEN}<mime-type>${OFF}]
           [--host ${CYAN}<url>${OFF}] [--dry-run] [-nc|--no-colors] ${YELLOW}<operation>${OFF} [-h|--help]
           [${BLUE}<headers>${OFF}] [${MAGENTA}<parameters>${OFF}] [${MAGENTA}<body-parameters>${OFF}]

  - ${CYAN}<url>${OFF} - endpoint of the REST service without basepath

  - ${RED}<curl-options>${OFF} - any valid cURL options can be passed before ${YELLOW}<operation>${OFF}
  - ${GREEN}<mime-type>${OFF} - either full mime-type or one of supported abbreviations:
                   (text, html, md, csv, css, rtf, json, xml, yaml, js, bin,
                    rdf, jpg, png, gif, bmp, tiff)
  - ${BLUE}<headers>${OFF} - HTTP headers can be passed in the form ${YELLOW}HEADER${OFF}:${BLUE}VALUE${OFF}
  - ${MAGENTA}<parameters>${OFF} - REST operation parameters can be passed in the following
                   forms:
                   * ${YELLOW}KEY${OFF}=${BLUE}VALUE${OFF} - path or query parameters
  - ${MAGENTA}<body-parameters>${OFF} - simple JSON body content (first level only) can be build
                        using the following arguments:
                        * ${YELLOW}KEY${OFF}==${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": "${BLUE}VALUE${OFF}", ... }'
                        * ${YELLOW}KEY${OFF}:=${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": ${BLUE}VALUE${OFF}, ... }'

EOF
    echo -e "${BOLD}${WHITE}Authentication methods${OFF}"
    echo -e ""
    echo -e "  - ${BLUE}Basic AUTH${OFF} - add '-u <username>:<password>' before ${YELLOW}<operation>${OFF}"
    
    echo ""
    echo -e "${BOLD}${WHITE}Operations (grouped by tags)${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsActiveIdentityCounts]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDActiveIdentityCountsGet${OFF};READ Active Identity Counts (Deprecated) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet${OFF};READ Active Identity Counts by Date Range (AUTH)
  ${CYAN}v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet${OFF};READ Active Identity Counts by License (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsAgreementManagementAgreementLanguagesResources]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet${OFF};READ All Languages (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete${OFF};DELETE Language (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet${OFF};READ One Language (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut${OFF};UPDATE Language (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost${OFF};CREATE Language (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsAgreementManagementAgreementRevisionsResources]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete${OFF};DELETE Revision (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet${OFF};READ All Revisions (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost${OFF};CREATE Revision (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet${OFF};READ One Revision (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsAgreementManagementAgreementsResources]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDDelete${OFF};DELETE Agreement (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDGet${OFF};READ One Agreement (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsAgreementIDPut${OFF};UPDATE Agreement (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsGet${OFF};READ All Agreements (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAgreementsPost${OFF};CREATE Agreement (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsAlerting]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut${OFF};UPDATE Alert Channel (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete${OFF};DELETE Alert Channel (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAlertChannelsGet${OFF};READ All Alert Channels per Environment (AUTH)
  ${CYAN}v1EnvironmentsEnvIDAlertChannelsPost${OFF};CREATE Alert Channel (Email) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplicationAttributeMapping]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createApplicationAttributeMapping${OFF};CREATE Application Attribute Mapping (AUTH)
  ${CYAN}deleteApplicationAttributeMapping${OFF};DELETE Application Attribute Mapping (AUTH)
  ${CYAN}readAllApplicationAttributeMappings${OFF};READ All Application Attribute Mappings (AUTH)
  ${CYAN}readOneApplicationAttributeMapping${OFF};READ One Application Attribute Mapping (AUTH)
  ${CYAN}updateApplicationAttributeMapping${OFF};UPDATE Application Attribute Mapping (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplicationMFAPushCredentials]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet${OFF};READ All MFA Push Credentials (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost${OFF};CREATE MFA Push Credential (FCM) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete${OFF};DELETE MFA Push Credential (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet${OFF};READ One MFA Push Credential (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut${OFF};UPDATE MFA Push Credential (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplicationResourceGrants]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createApplicationGrant${OFF};CREATE Grant (AUTH)
  ${CYAN}deleteApplicationGrant${OFF};DELETE Grant (AUTH)
  ${CYAN}readAllApplicationGrants${OFF};READ All Grants for an Application (AUTH)
  ${CYAN}readOneApplicationGrant${OFF};READ One Grant for an Application (AUTH)
  ${CYAN}updateApplicationGrant${OFF};UPDATE Grant (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplicationRoleAssignments]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet${OFF};READ Application Role Assignments (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost${OFF};CREATE Application Role Assignments (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete${OFF};DELETE Application Role Assignment (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet${OFF};READ One Application Role Assignment (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplicationSecret]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}readApplicationSecret${OFF};READ Application Secret (AUTH)
  ${CYAN}updateApplicationSecret${OFF};UPDATE Application Secret (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplicationSignOnPolicyAssignments]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet${OFF};READ All SOP Assignments (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost${OFF};CREATE SOP Assignment (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete${OFF};DELETE SOP Assignment (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet${OFF};READ One SOP Assignment (AUTH)
  ${CYAN}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut${OFF};UPDATE SOP Assignment (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsApplicationsApplications]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createApplication${OFF};CREATE Application (AUTH)
  ${CYAN}deleteApplication${OFF};DELETE Application (AUTH)
  ${CYAN}readAllApplications${OFF};READ All Applications (AUTH)
  ${CYAN}readOneApplication${OFF};READ One Application (AUTH)
  ${CYAN}updateApplication${OFF};UPDATE Application (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsAuditActivities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDActivitiesActivityIDGet${OFF};GET One User Activity (AUTH)
  ${CYAN}v1EnvironmentsEnvIDActivitiesGet${OFF};GET User Activities (AUTH)
  ${CYAN}v1EnvironmentsEnvIDActivitiesPost${OFF};GET User Activities (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsAuthenticationsPerApplication]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDApplicationSignonsGet${OFF};READ Authentications Per Application (Partial) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsBillOfMaterialsBOM]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}readOneBillOfMaterials${OFF};READ One Bill of Materials (AUTH)
  ${CYAN}updateBillOfMaterials${OFF};UPDATE Bill of Materials (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsBrandingBrandingSettings]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDBrandingSettingsGet${OFF};READ Branding Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDBrandingSettingsPut${OFF};UPDATE Branding Settings (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsBrandingBrandingThemes]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDThemesGet${OFF};READ Branding Themes (AUTH)
  ${CYAN}v1EnvironmentsEnvIDThemesPost${OFF};CREATE Branding Theme (AUTH)
  ${CYAN}v1EnvironmentsEnvIDThemesThemeIDDefaultGet${OFF};READ Branding Theme Default (AUTH)
  ${CYAN}v1EnvironmentsEnvIDThemesThemeIDDefaultPut${OFF};UPDATE Branding Theme Default (AUTH)
  ${CYAN}v1EnvironmentsEnvIDThemesThemeIDDelete${OFF};DELETE Branding Theme (AUTH)
  ${CYAN}v1EnvironmentsEnvIDThemesThemeIDGet${OFF};READ One Branding Theme (AUTH)
  ${CYAN}v1EnvironmentsEnvIDThemesThemeIDPut${OFF};UPDATE Branding Theme (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsCapabilities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDCapabilitiesGet${OFF};READ Environment Capabilities (AUTH)
  ${CYAN}v1OrganizationsOrgIDCapabilitiesGet${OFF};READ Organization Capabilities (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsCertificateManagement]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet${OFF};GET Certificate Applications (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCertificatesCertIDDelete${OFF};DELETE Certificate (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCertificatesCertIDGet${OFF};GET Certificate (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCertificatesGet${OFF};GET Certificates (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCertificatesPost${OFF};CREATE Certificate with PKCS7 or PEM File (AUTH)
  ${CYAN}v1EnvironmentsEnvIDDecryptionsPost${OFF};DECRYPT Data (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEncryptionsPost${OFF};ENCRYPT Data (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysGet${OFF};GET Keys (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysKeyIDApplicationsGet${OFF};GET Key Applications (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysKeyIDCsrGet${OFF};Export a certificate signing request (CSR) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysKeyIDCsrPut${OFF};Import Certificate Authority (CA) Response to a CSR (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysKeyIDDelete${OFF};DELETE Key (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysKeyIDGet${OFF};EXPORT Public Key (X509 PEM) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysKeyIDPut${OFF};UPDATE Key (AUTH)
  ${CYAN}v1EnvironmentsEnvIDKeysPost${OFF};CREATE Key with PKCS12 File (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSigningsPost${OFF};SIGN Data (AUTH)
  ${CYAN}v1EnvironmentsEnvIDVerificationsPost${OFF};VERIFY Signed Data (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsCustomDomains]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDCustomDomainsDomIDDelete${OFF};DELETE Domain (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCustomDomainsDomIDGet${OFF};READ One Domain (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCustomDomainsDomIDPost${OFF};Import Certificate (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCustomDomainsGet${OFF};READ All Domains (AUTH)
  ${CYAN}v1EnvironmentsEnvIDCustomDomainsPost${OFF};CREATE Domain (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsDeviceAuthenticationPolicy]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut${OFF};UPDATE Device Authentication Policy (AUTH)
  ${CYAN}v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet${OFF};READ Device Authentication Policy (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsEnvironments]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createEnvironmentActiveLicense${OFF};CREATE Environment (Active License) (AUTH)
  ${CYAN}deleteEnvironment${OFF};DELETE Environment (AUTH)
  ${CYAN}readAllEnvironments${OFF};READ All Environments (AUTH)
  ${CYAN}readOneEnvironment${OFF};READ One Environment (AUTH)
  ${CYAN}updateEnvironment${OFF};UPDATE Environment (AUTH)
  ${CYAN}updateEnvironmentType${OFF};UPDATE Environment Type (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsGatewayManagementGatewayCredentials]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createGatewayCredential${OFF};CREATE Gateway Credentials (AUTH)
  ${CYAN}deleteGatewayCredential${OFF};DELETE Gateway Credentials (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsGatewayManagementGatewayInstances]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}readAllGatewayInstances${OFF};READ All Gateway Instances (AUTH)
  ${CYAN}readOneGatewayInstance${OFF};READ One Gateway Instance (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsGatewayManagementGatewayRoleAssignments]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createGatewayRoleAssignment${OFF};CREATE Gateway Role Assignments (AUTH)
  ${CYAN}deleteGatewayRoleAssignment${OFF};DELETE Gateway Role Assignment (AUTH)
  ${CYAN}readGatewayRoleAssignments${OFF};READ Gateway Role Assignments (AUTH)
  ${CYAN}readOneGatewayRoleAssignment${OFF};READ One Gateway Role Assignment (AUTH)
  ${CYAN}updateGatewayRoleAssignment${OFF};UPDATE Gateway Role Assignments (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsGatewayManagementGateways]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createGateway${OFF};CREATE Gateway (AUTH)
  ${CYAN}deleteGateway${OFF};DELETE Gateway (AUTH)
  ${CYAN}readAllGateways${OFF};READ All Gateways (AUTH)
  ${CYAN}readOneGateway${OFF};READ One Gateway (AUTH)
  ${CYAN}updateGateway${OFF};UPDATE Gateway (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsGroups]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createGroup${OFF};CREATE Group (AUTH)
  ${CYAN}deleteGroup${OFF};DELETE Group (AUTH)
  ${CYAN}readAllGroups${OFF};READ All Groups (AUTH)
  ${CYAN}readOneGroup${OFF};READ One Group (AUTH)
  ${CYAN}updateGroup${OFF};UPDATE Group (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityPropagationProvisioningPropagationMappings]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPropagationMappingMappingIDDelete${OFF};DELETE Mapping (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationMappingsMappingIDGet${OFF};READ One Mapping (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationMappingsMappingIDPut${OFF};UPDATE Mapping (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet${OFF};READ One Rule  Mapping (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost${OFF};CREATE Rule Mapping (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityPropagationProvisioningPropagationPlans]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPropagationPlansGet${OFF};READ All Plans (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationPlansPlanIDDelete${OFF};DELETE Plan (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationPlansPlanIDGet${OFF};READ One Plan (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationPlansPlanIDPut${OFF};UPDATE Plan (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationPlansPost${OFF};CREATE Plan (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityPropagationProvisioningPropagationRevisions]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet${OFF};READ Latest Revision (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRevisionsPost${OFF};CREATE Revision (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet${OFF};READ Previous Revision (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityPropagationProvisioningPropagationRules]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet${OFF};READ One Plan's Rules (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesGet${OFF};READ All Rules (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesPost${OFF};CREATE Rule (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesRuleIDDelete${OFF};DELETE Rule (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesRuleIDGet${OFF};READ One Rule (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationRulesStoreIDPut${OFF};UPDATE Rule (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityPropagationProvisioningPropagationStoreMetadata]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost${OFF};Identity Propagation Store Metadata (Aquera) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost${OFF};Identity Propagation Store Metadata (SalesforceContacts) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost${OFF};Identity Propagation Store Metadata (Salesforce) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoreMetadataScimPost${OFF};Identity Propagation Store Metadata (SCIM) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityPropagationProvisioningPropagationStores]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost${OFF};TEST Connection Configuration (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoresGet${OFF};READ All Stores (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoresPost${OFF};CREATE Store (Aquera) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoresStoreIDDelete${OFF};DELETE Store (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoresStoreIDGet${OFF};READ One Store (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPropagationStoresStoreIDPut${OFF};UPDATE Store (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityProviderManagementIdentityProviderAttributes]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete${OFF};DELETE Identity Provider Attribute (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet${OFF};READ All Identity Provider Attributes (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet${OFF};READ One Identity Provider Attribute (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut${OFF};UPDATE Identity Provider Attribute (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost${OFF};CREATE Identity Provider Attribute (SAML) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIdentityProviderManagementIdentityProviders]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersGet${OFF};READ All Identity Providers (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersPost${OFF};Discover OpenID Provider Metadata (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete${OFF};DELETE Identity Provider (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDGet${OFF};READ One Identity Provider (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIdentityProvidersProviderIDPut${OFF};UPDATE Identity Provider (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsImages]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDImagesImgIDDelete${OFF};DELETE Image (AUTH)
  ${CYAN}v1EnvironmentsEnvIDImagesImgIDGet${OFF};READ Image (AUTH)
  ${CYAN}v1EnvironmentsEnvIDImagesPost${OFF};CREATE Image (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsIntegrationCatalog]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDIntegrationsGet${OFF};READ Integration Metadata (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIntegrationsIntegrationIDGet${OFF};READ One Integration Metadata (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet${OFF};READ Integration Version Metadata (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet${OFF};READ Integration Version Asset Download (AUTH)
  ${CYAN}v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet${OFF};READ One Integration Version Metadata (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsLanguageManagementLanguageLocalizationStatus]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet${OFF};READ Language Localization Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete${OFF};DELETE Language Localization Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet${OFF};READ One Language Localization Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut${OFF};CREATE Language Localization Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost${OFF};CREATE Language Localization Status (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsLanguageManagementLanguages]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDLanguagesGet${OFF};READ Languages (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDDelete${OFF};DELETE Language (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDGet${OFF};READ One Language (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesLanguageIDPut${OFF};UPDATE Language (AUTH)
  ${CYAN}v1EnvironmentsEnvIDLanguagesPost${OFF};CREATE Language (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsLicenses]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1OrganizationsOrgIDLicensesGet${OFF};READ All Licenses (AUTH)
  ${CYAN}v1OrganizationsOrgIDLicensesLicenseIDGet${OFF};READ One License (AUTH)
  ${CYAN}v1OrganizationsOrgIDLicensesLicenseIDNameGet${OFF};READ One License Name (AUTH)
  ${CYAN}v1OrganizationsOrgIDLicensesLicenseIDNamePut${OFF};Update One License Name (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsMFASettings]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDMfaSettingsDelete${OFF};RESET MFA Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDMfaSettingsGet${OFF};READ MFA Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDMfaSettingsPut${OFF};UPDATE MFA Settings (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsNotificationsNotificationsSettings]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsDelete${OFF};DELETE Notifications Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsGet${OFF};READ Notifications Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsPut${OFF};UPDATE Notifications Settings (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsNotificationsNotificationsSettingsSMTP]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet${OFF};READ Notifications Settings (SMTP) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut${OFF};UPDATE Notifications Settings (SMTP) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsNotificationsNotificationsTemplates]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDTemplatesGet${OFF};READ All Templates (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete${OFF};DELETE Content (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet${OFF};READ One Content (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut${OFF};UPDATE Push Content (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete${OFF};DELETE Bulk Variant Contents (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet${OFF};READ All Contents (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch${OFF};PATCH Bulk Variant Contents (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost${OFF};CREATE Push Content (AUTH)
  ${CYAN}v1EnvironmentsEnvIDTemplatesTemplateNameGet${OFF};READ One Template (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsNotificationsPhoneDeliverySettings]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete${OFF};DELETE Phone Delivery Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet${OFF};READ All Phone Delivery Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet${OFF};READ One Phone Delivery Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut${OFF};UPDATE Phone Delivery Settings (AUTH)
  ${CYAN}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost${OFF};CREATE Phone Delivery Settings (Syniverse) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsNotificationsTrustedEmailAddresses]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet${OFF};READ All Trusted Email Addresses (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost${OFF};CREATE Trusted Email Address (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete${OFF};DELETE Trusted Email Address (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet${OFF};READ One Trusted Email Address (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost${OFF};Resend Verification Code To Email (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsNotificationsTrustedEmailDomains]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete${OFF};DELETE Trusted Email Domain (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet${OFF};READ Trusted Email Domain DKIM Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet${OFF};READ One Trusted Email Domain (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet${OFF};READ Trusted Email Domain Ownership Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet${OFF};READ Trusted Email Domain SPF Status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsGet${OFF};READ All Trusted Email Domains (AUTH)
  ${CYAN}v1EnvironmentsEnvIDEmailDomainsPost${OFF};CREATE Trusted Email Domain (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsOrganizations]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1OrganizationsGet${OFF};READ All Organizations (AUTH)
  ${CYAN}v1OrganizationsOrgIDGet${OFF};READ One Organization (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsPasswordPolicies]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDPasswordPoliciesGet${OFF};READ All Password Policies (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet${OFF};READ One Password Policy (AUTH)
  ${CYAN}v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut${OFF};UPDATE Password Policy (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsPopulations]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createPopulation${OFF};CREATE Population (AUTH)
  ${CYAN}deletePopulation${OFF};DELETE Population (AUTH)
  ${CYAN}readAllPopulations${OFF};READ All Populations (AUTH)
  ${CYAN}readOnePopulation${OFF};READ One Population (AUTH)
  ${CYAN}updatePopulation${OFF};UPDATE Population (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsResourcesResourceAttributes]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createResourceAttribute${OFF};CREATE Resource Attribute (AUTH)
  ${CYAN}deleteResourceAttribute${OFF};DELETE Resource Attribute (AUTH)
  ${CYAN}readAllResourceAttributes${OFF};READ All Resource Attributes (AUTH)
  ${CYAN}readOneResourceAttribute${OFF};READ One Resource Attribute (AUTH)
  ${CYAN}updateResourceAttribute${OFF};UPDATE Resource Attribute (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsResourcesResourceScopes]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createResourceScope${OFF};CREATE PingOne access control scope (AUTH)
  ${CYAN}deleteResourceScope${OFF};DELETE Scope (AUTH)
  ${CYAN}readAllResourceScopes${OFF};READ All Scopes (Resource) (AUTH)
  ${CYAN}readOneResourceScope${OFF};READ One Scope (AUTH)
  ${CYAN}updateResourceScope${OFF};UPDATE PingOne access control scope (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsResourcesResources]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createResource${OFF};CREATE Resource (AUTH)
  ${CYAN}deleteResource${OFF};DELETE Resource (AUTH)
  ${CYAN}readAllResources${OFF};READ All Resources (AUTH)
  ${CYAN}readOneResource${OFF};READ One Resource (AUTH)
  ${CYAN}updateResource${OFF};UPDATE Resource (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsRiskManagementRiskAdvancedPredictors]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createRiskPredictor${OFF};CREATE Risk Predictor (AUTH)
  ${CYAN}deleteRiskAdvancedPredictor${OFF};DELETE Risk Advanced Predictor (AUTH)
  ${CYAN}readAllRiskPredictors${OFF};READ All Risk Predictors (AUTH)
  ${CYAN}readOneRiskPredictor${OFF};READ One Risk Predictor (AUTH)
  ${CYAN}updateRiskPredictor${OFF};UPDATE Risk Predictor (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsRiskManagementRiskEvaluations]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createRiskEvaluation${OFF};CREATE Risk Evaluation (AUTH)
  ${CYAN}readOneRiskEvaluation${OFF};READ One Risk Evaluation (AUTH)
  ${CYAN}updateRiskEvaluation${OFF};UPDATE Risk Evaluation (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsRiskManagementRiskPolicies]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createRiskPolicySet${OFF};CREATE Risk Policy Set (AUTH)
  ${CYAN}deleteRiskPolicySet${OFF};DELETE Risk Policy Set (AUTH)
  ${CYAN}readOneRiskPolicySet${OFF};READ One Risk Policy Set (AUTH)
  ${CYAN}readRiskPolicySets${OFF};READ Risk Policy Sets (AUTH)
  ${CYAN}updateRiskPolicySet${OFF};UPDATE Risk Policy Set (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsRoles]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}readAllRoles${OFF};READ All Roles (AUTH)
  ${CYAN}readOneRole${OFF};READ One Role (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsSchemas]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createAttribute${OFF};CREATE Attribute (AUTH)
  ${CYAN}deleteAttribute${OFF};DELETE Attribute (AUTH)
  ${CYAN}readAllSchemaAttributes${OFF};READ All (Schema) Attributes (AUTH)
  ${CYAN}readAllSchemas${OFF};READ All Schemas (AUTH)
  ${CYAN}readOneAttribute${OFF};READ One Attribute (AUTH)
  ${CYAN}readOneSchema${OFF};READ One Schema (AUTH)
  ${CYAN}updateAttributePatch${OFF};UPDATE Attribute (Patch) (AUTH)
  ${CYAN}updateAttributePut${OFF};UPDATE Attribute (Put) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsSignOnPoliciesSignOnPolicies]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesGet${OFF};READ All Sign On Policies (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete${OFF};DELETE Sign On Policy (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet${OFF};READ One Sign On Policy (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut${OFF};UPDATE Sign On Policy (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPost${OFF};CREATE Sign On Policy (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsSignOnPoliciesSignOnPolicyActions]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost${OFF};CREATE Sign-On Policy Action (AGREEMENT) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete${OFF};DELETE Sign-On Policy Action (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet${OFF};READ One Sign-On Policy Action (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut${OFF};UPDATE Sign-On Policy Action (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet${OFF};READ All Sign-On Policy Actions (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost${OFF};CREATE Sign-On Policy Action (IDENTITY_PROVIDER) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsSubscriptionsWebhooks]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDSubscriptionsGet${OFF};READ All Subscriptions (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSubscriptionsPost${OFF};CREATE Subscriptions (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete${OFF};DELETE Subscription (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet${OFF};READ One Subscription (AUTH)
  ${CYAN}v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut${OFF};UPDATE Subscription (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsTotalIdentities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDTotalIdentitiesGet${OFF};READ Total Identity Counts (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUserActivities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUserActivitiesGet${OFF};READ User Activities (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersEnableUsers]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDEnabledGet${OFF};READ User Enabled (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDEnabledPut${OFF};UPDATE User Enabled (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersEnableUsersMFA]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet${OFF};READ User MFA Enabled (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut${OFF};UPDATE User MFA Enabled (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersGroupMembership]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}addUserToGroup${OFF};ADD User to Group (AUTH)
  ${CYAN}readAllGroupMembershipsForUser${OFF};READ All Group Memberships for User (AUTH)
  ${CYAN}readOneGroupMembershipForUser${OFF};READ One Group Membership for User (AUTH)
  ${CYAN}removeUserFromGroup${OFF};REMOVE User from Group (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersLinkedAccounts]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet${OFF};READ Linked Accounts (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete${OFF};DELETE Linked Account (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet${OFF};READ One Linked Account (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersMFADevices]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesDelete${OFF};DELETE Device Order (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete${OFF};DELETE MFA User Device (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet${OFF};READ One MFA User Device (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut${OFF};SEND MFA Device Logs (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut${OFF};UPDATE Device Nickname (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost${OFF};ACTIVATE MFA User Device (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesGet${OFF};READ All MFA User Devices (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDDevicesPost${OFF};SET Device Order (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersMFAPairingKeys]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete${OFF};DELETE MFA Pairing Key (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet${OFF};READ One MFA Pairing Key (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPairingKeysPost${OFF};CREATE MFA Pairing Key (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersSessions]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDSessionsGet${OFF};READ All Sessions (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete${OFF};DELETE Session (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet${OFF};READ One Session (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUserAccounts]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPost${OFF};User Account Unlock (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUserAgreementConsents]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet${OFF};READ One User Agreement Consent (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost${OFF};Revoke Agreement (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet${OFF};READ All User Agreement Consents (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUserIDVerification]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet${OFF};READ All ID Verification Transaction Records for a User (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost${OFF};CREATE ID Verification Transaction Record for a User (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete${OFF};DELETE ID Verification Transaction Record for a User (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet${OFF};READ ID Verification Transaction Record for a User (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut${OFF};UPDATE ID Verification Transaction Record for a User (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUserPasswords]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPasswordGet${OFF};READ Password State (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPasswordPost${OFF};Password Locked Out (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPasswordPut${OFF};UPDATE Password (Set) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUserPopulations]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPopulationGet${OFF};READ User Population (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDPopulationPut${OFF};UPDATE User Population (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUserRoleAssignments]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createUserRoleAssignment${OFF};CREATE User Role Assignment (AUTH)
  ${CYAN}deleteUserRoleAssignment${OFF};DELETE User's Role Assignment (AUTH)
  ${CYAN}readOneRoleAssignment${OFF};READ One Role Assignment (AUTH)
  ${CYAN}readUserRoleAssignments${OFF};READ Role Assignments (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[managementAPIsUsersUsers]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}createUser${OFF};CREATE User (AUTH)
  ${CYAN}deleteUser${OFF};DELETE User (AUTH)
  ${CYAN}readAllUsers${OFF};READ All Users (AUTH)
  ${CYAN}readUser${OFF};READ User (AUTH)
  ${CYAN}updateUserPatch${OFF};UPDATE User (Patch) (AUTH)
  ${CYAN}updateUserPut${OFF};UPDATE User (Put) (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet${OFF};READ User Identity Provider (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut${OFF};UPDATE User Identity Provider (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet${OFF};READ user verification status (AUTH)
  ${CYAN}v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut${OFF};UPDATE user verification status (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}Options${OFF}"
    echo -e "  -h,--help\\t\\t\\t\\tPrint this help"
    echo -e "  -V,--version\\t\\t\\t\\tPrint API version"
    echo -e "  --about\\t\\t\\t\\tPrint the information about service"
    echo -e "  --host ${CYAN}<url>${OFF}\\t\\t\\t\\tSpecify the host URL "
echo -e "              \\t\\t\\t\\t(e.g. 'https://api.pingone.eu')"

    echo -e "  --force\\t\\t\\t\\tForce command invocation in spite of missing"
    echo -e "         \\t\\t\\t\\trequired parameters or wrong content type"
    echo -e "  --dry-run\\t\\t\\t\\tPrint out the cURL command without"
    echo -e "           \\t\\t\\t\\texecuting it"
    echo -e "  -nc,--no-colors\\t\\t\\tEnforce print without colors, otherwise autodected"
    echo -e "  -ac,--accept ${YELLOW}<mime-type>${OFF}\\t\\tSet the 'Accept' header in the request"
    echo -e "  -ct,--content-type ${YELLOW}<mime-type>${OFF}\\tSet the 'Content-type' header in "
    echo -e "                                \\tthe request"
    echo ""
}


##############################################################################
#
# Print REST service description
#
##############################################################################
print_about() {
    echo ""
    echo -e "${BOLD}${WHITE}PingOne Platform API - Management command line client (API version 1.0.0)${OFF}"
    echo ""
    echo -e "License: "
    echo -e "Contact: "
    echo ""
read -r -d '' appdescription <<EOF

A bare-bones collection for the PingOne API
EOF
echo "$appdescription" | paste -sd' ' | fold -sw 80
}


##############################################################################
#
# Print REST api version
#
##############################################################################
print_version() {
    echo ""
    echo -e "${BOLD}PingOne Platform API - Management command line client (API version 1.0.0)${OFF}"
    echo ""
}

##############################################################################
#
# Print help for v1EnvironmentsEnvIDActiveIdentityCountsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDActiveIdentityCountsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDActiveIdentityCountsGet - READ Active Identity Counts (Deprecated)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet - READ Active Identity Counts by Date Range${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}samplePeriod${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: samplePeriod=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet operation
#
##############################################################################
print_v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet - READ Active Identity Counts by License${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}licenseID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: licenseID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}aggregatedBy${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: aggregatedBy=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet - READ All Languages${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete - DELETE Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet - READ One Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut - UPDATE Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost - CREATE Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete - DELETE Revision${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet - READ All Revisions${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost - CREATE Revision${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet - READ One Revision${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}revisionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: revisionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDDelete - DELETE Agreement${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDGet - READ One Agreement${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsAgreementIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsAgreementIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsAgreementIDPut - UPDATE Agreement${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsGet - READ All Agreements${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAgreementsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDAgreementsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAgreementsPost - CREATE Agreement${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut - UPDATE Alert Channel${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}alertChannelID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: alertChannelID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete - DELETE Alert Channel${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}alertChannelsID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: alertChannelsID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAlertChannelsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDAlertChannelsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAlertChannelsGet - READ All Alert Channels per Environment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDAlertChannelsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDAlertChannelsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDAlertChannelsPost - CREATE Alert Channel (Email)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createApplicationAttributeMapping operation
#
##############################################################################
print_createApplicationAttributeMapping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createApplicationAttributeMapping - CREATE Application Attribute Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteApplicationAttributeMapping operation
#
##############################################################################
print_deleteApplicationAttributeMapping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteApplicationAttributeMapping - DELETE Application Attribute Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attrMappingID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attrMappingID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllApplicationAttributeMappings operation
#
##############################################################################
print_readAllApplicationAttributeMappings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllApplicationAttributeMappings - READ All Application Attribute Mappings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneApplicationAttributeMapping operation
#
##############################################################################
print_readOneApplicationAttributeMapping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneApplicationAttributeMapping - READ One Application Attribute Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attrMappingID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attrMappingID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateApplicationAttributeMapping operation
#
##############################################################################
print_updateApplicationAttributeMapping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateApplicationAttributeMapping - UPDATE Application Attribute Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attrMappingID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attrMappingID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet - READ All MFA Push Credentials${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost - CREATE MFA Push Credential (FCM)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete - DELETE MFA Push Credential${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pushCredID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: pushCredID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet - READ One MFA Push Credential${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pushCredID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: pushCredID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut - UPDATE MFA Push Credential${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pushCredID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: pushCredID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createApplicationGrant operation
#
##############################################################################
print_createApplicationGrant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createApplicationGrant - CREATE Grant${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteApplicationGrant operation
#
##############################################################################
print_deleteApplicationGrant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteApplicationGrant - DELETE Grant${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}grantID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: grantID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllApplicationGrants operation
#
##############################################################################
print_readAllApplicationGrants_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllApplicationGrants - READ All Grants for an Application${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneApplicationGrant operation
#
##############################################################################
print_readOneApplicationGrant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneApplicationGrant - READ One Grant for an Application${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}grantID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: grantID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateApplicationGrant operation
#
##############################################################################
print_updateApplicationGrant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateApplicationGrant - UPDATE Grant${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}grantID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: grantID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet - READ Application Role Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost - CREATE Application Role Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete - DELETE Application Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}roleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: roleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet - READ One Application Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}roleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: roleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readApplicationSecret operation
#
##############################################################################
print_readApplicationSecret_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readApplicationSecret - READ Application Secret${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateApplicationSecret operation
#
##############################################################################
print_updateApplicationSecret_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateApplicationSecret - UPDATE Application Secret${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet - READ All SOP Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost - CREATE SOP Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete - DELETE SOP Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}SOPAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: SOPAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet - READ One SOP Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}SOPAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: SOPAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut - UPDATE SOP Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}SOPAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: SOPAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createApplication operation
#
##############################################################################
print_createApplication_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createApplication - CREATE Application${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteApplication operation
#
##############################################################################
print_deleteApplication_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteApplication - DELETE Application${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllApplications operation
#
##############################################################################
print_readAllApplications_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllApplications - READ All Applications${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneApplication operation
#
##############################################################################
print_readOneApplication_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneApplication - READ One Application${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateApplication operation
#
##############################################################################
print_updateApplication_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateApplication - UPDATE Application${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}appID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: appID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDActivitiesActivityIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDActivitiesActivityIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDActivitiesActivityIDGet - GET One User Activity${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}activityID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: activityID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDActivitiesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDActivitiesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDActivitiesGet - GET User Activities${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDActivitiesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDActivitiesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDActivitiesPost - GET User Activities${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDApplicationSignonsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDApplicationSignonsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDApplicationSignonsGet - READ Authentications Per Application (Partial)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}samplePeriod${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: samplePeriod=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}samplePeriodCount${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: samplePeriodCount=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneBillOfMaterials operation
#
##############################################################################
print_readOneBillOfMaterials_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneBillOfMaterials - READ One Bill of Materials${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateBillOfMaterials operation
#
##############################################################################
print_updateBillOfMaterials_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateBillOfMaterials - UPDATE Bill of Materials${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDBrandingSettingsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDBrandingSettingsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDBrandingSettingsGet - READ Branding Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDBrandingSettingsPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDBrandingSettingsPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDBrandingSettingsPut - UPDATE Branding Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesGet - READ Branding Themes${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesPost - CREATE Branding Theme${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesThemeIDDefaultGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesThemeIDDefaultGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesThemeIDDefaultGet - READ Branding Theme Default${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}themeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: themeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesThemeIDDefaultPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesThemeIDDefaultPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesThemeIDDefaultPut - UPDATE Branding Theme Default${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}themeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: themeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesThemeIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesThemeIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesThemeIDDelete - DELETE Branding Theme${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}themeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: themeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesThemeIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesThemeIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesThemeIDGet - READ One Branding Theme${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}themeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: themeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDThemesThemeIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDThemesThemeIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDThemesThemeIDPut - UPDATE Branding Theme${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}themeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: themeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCapabilitiesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDCapabilitiesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCapabilitiesGet - READ Environment Capabilities${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDCapabilitiesGet operation
#
##############################################################################
print_v1OrganizationsOrgIDCapabilitiesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDCapabilitiesGet - READ Organization Capabilities${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet - GET Certificate Applications${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}certID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: certID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCertificatesCertIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDCertificatesCertIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCertificatesCertIDDelete - DELETE Certificate${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}certID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: certID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCertificatesCertIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDCertificatesCertIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCertificatesCertIDGet - GET Certificate${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}certID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: certID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCertificatesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDCertificatesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCertificatesGet - GET Certificates${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCertificatesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDCertificatesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCertificatesPost - CREATE Certificate with PKCS7 or PEM File${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDDecryptionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDDecryptionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDDecryptionsPost - DECRYPT Data${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEncryptionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDEncryptionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEncryptionsPost - ENCRYPT Data${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysGet - GET Keys${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysKeyIDApplicationsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysKeyIDApplicationsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysKeyIDApplicationsGet - GET Key Applications${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}keyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: keyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysKeyIDCsrGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysKeyIDCsrGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysKeyIDCsrGet - Export a certificate signing request (CSR)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}keyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: keyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysKeyIDCsrPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysKeyIDCsrPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysKeyIDCsrPut - Import Certificate Authority (CA) Response to a CSR${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}keyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: keyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysKeyIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysKeyIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysKeyIDDelete - DELETE Key${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}keyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: keyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysKeyIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysKeyIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysKeyIDGet - EXPORT Public Key (X509 PEM)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}keyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: keyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysKeyIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysKeyIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysKeyIDPut - UPDATE Key${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}keyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: keyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDKeysPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDKeysPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDKeysPost - CREATE Key with PKCS12 File${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSigningsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDSigningsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSigningsPost - SIGN Data${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDVerificationsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDVerificationsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDVerificationsPost - VERIFY Signed Data${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCustomDomainsDomIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDCustomDomainsDomIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCustomDomainsDomIDDelete - DELETE Domain${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}domID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: domID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCustomDomainsDomIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDCustomDomainsDomIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCustomDomainsDomIDGet - READ One Domain${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}domID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: domID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCustomDomainsDomIDPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDCustomDomainsDomIDPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCustomDomainsDomIDPost - Import Certificate${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}domID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: domID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCustomDomainsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDCustomDomainsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCustomDomainsGet - READ All Domains${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDCustomDomainsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDCustomDomainsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDCustomDomainsPost - CREATE Domain${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut - UPDATE Device Authentication Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deviceAuthPolicyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: deviceAuthPolicyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet - READ Device Authentication Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createEnvironmentActiveLicense operation
#
##############################################################################
print_createEnvironmentActiveLicense_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createEnvironmentActiveLicense - CREATE Environment (Active License)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteEnvironment operation
#
##############################################################################
print_deleteEnvironment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteEnvironment - DELETE Environment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllEnvironments operation
#
##############################################################################
print_readAllEnvironments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllEnvironments - READ All Environments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Adding a paging value to limit the number of resources displayed per page${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Adding a SCIM filter for an environment to display only those resources associated with the specified environment. 'sw', 'eq' and 'and' are supported${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneEnvironment operation
#
##############################################################################
print_readOneEnvironment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneEnvironment - READ One Environment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateEnvironment operation
#
##############################################################################
print_updateEnvironment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateEnvironment - UPDATE Environment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateEnvironmentType operation
#
##############################################################################
print_updateEnvironmentType_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateEnvironmentType - UPDATE Environment Type${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createGatewayCredential operation
#
##############################################################################
print_createGatewayCredential_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createGatewayCredential - CREATE Gateway Credentials${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteGatewayCredential operation
#
##############################################################################
print_deleteGatewayCredential_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteGatewayCredential - DELETE Gateway Credentials${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}credentialID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: credentialID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllGatewayInstances operation
#
##############################################################################
print_readAllGatewayInstances_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllGatewayInstances - READ All Gateway Instances${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneGatewayInstance operation
#
##############################################################################
print_readOneGatewayInstance_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneGatewayInstance - READ One Gateway Instance${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}instanceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: instanceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createGatewayRoleAssignment operation
#
##############################################################################
print_createGatewayRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createGatewayRoleAssignment - CREATE Gateway Role Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteGatewayRoleAssignment operation
#
##############################################################################
print_deleteGatewayRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteGatewayRoleAssignment - DELETE Gateway Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayRoleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayRoleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readGatewayRoleAssignments operation
#
##############################################################################
print_readGatewayRoleAssignments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readGatewayRoleAssignments - READ Gateway Role Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneGatewayRoleAssignment operation
#
##############################################################################
print_readOneGatewayRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneGatewayRoleAssignment - READ One Gateway Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayRoleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayRoleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGatewayRoleAssignment operation
#
##############################################################################
print_updateGatewayRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGatewayRoleAssignment - UPDATE Gateway Role Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayRoleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayRoleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createGateway operation
#
##############################################################################
print_createGateway_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createGateway - CREATE Gateway${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteGateway operation
#
##############################################################################
print_deleteGateway_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteGateway - DELETE Gateway${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllGateways operation
#
##############################################################################
print_readAllGateways_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllGateways - READ All Gateways${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneGateway operation
#
##############################################################################
print_readOneGateway_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneGateway - READ One Gateway${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGateway operation
#
##############################################################################
print_updateGateway_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGateway - UPDATE Gateway${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}gatewayID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: gatewayID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createGroup operation
#
##############################################################################
print_createGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createGroup - CREATE Group${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteGroup operation
#
##############################################################################
print_deleteGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteGroup - DELETE Group${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}groupID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: groupID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllGroups operation
#
##############################################################################
print_readAllGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllGroups - READ All Groups${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneGroup operation
#
##############################################################################
print_readOneGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneGroup - READ One Group${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}groupID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: groupID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: include=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateGroup operation
#
##############################################################################
print_updateGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateGroup - UPDATE Group${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}groupID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: groupID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationMappingMappingIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationMappingMappingIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationMappingMappingIDDelete - DELETE Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}mappingID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: mappingID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationMappingsMappingIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationMappingsMappingIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationMappingsMappingIDGet - READ One Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}mappingID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: mappingID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationMappingsMappingIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationMappingsMappingIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationMappingsMappingIDPut - UPDATE Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}mappingID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: mappingID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet - READ One Rule  Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ruleID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: ruleID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost - CREATE Rule Mapping${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ruleID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: ruleID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationPlansGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationPlansGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationPlansGet - READ All Plans${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationPlansPlanIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationPlansPlanIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationPlansPlanIDDelete - DELETE Plan${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}planID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: planID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationPlansPlanIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationPlansPlanIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationPlansPlanIDGet - READ One Plan${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}planID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: planID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationPlansPlanIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationPlansPlanIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationPlansPlanIDPut - UPDATE Plan${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}planID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: planID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationPlansPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationPlansPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationPlansPost - CREATE Plan${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet - READ Latest Revision${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRevisionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRevisionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRevisionsPost - CREATE Revision${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet - READ Previous Revision${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}previousRevisionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: previousRevisionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet - READ One Plan's Rules${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}planID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: planID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesGet - READ All Rules${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Authorization${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Authorization:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesPost - CREATE Rule${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesRuleIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesRuleIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesRuleIDDelete - DELETE Rule${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ruleID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: ruleID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesRuleIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesRuleIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesRuleIDGet - READ One Rule${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ruleID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: ruleID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationRulesStoreIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationRulesStoreIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationRulesStoreIDPut - UPDATE Rule${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}storeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: storeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost - Identity Propagation Store Metadata (Aquera)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost - Identity Propagation Store Metadata (SalesforceContacts)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost - Identity Propagation Store Metadata (Salesforce)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoreMetadataScimPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoreMetadataScimPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoreMetadataScimPost - Identity Propagation Store Metadata (SCIM)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost - TEST Connection Configuration${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoresGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoresGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoresGet - READ All Stores${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoresPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoresPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoresPost - CREATE Store (Aquera)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoresStoreIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoresStoreIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoresStoreIDDelete - DELETE Store${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}storeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: storeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoresStoreIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoresStoreIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoresStoreIDGet - READ One Store${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}storeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: storeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Accept${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Accept:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPropagationStoresStoreIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDPropagationStoresStoreIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPropagationStoresStoreIDPut - UPDATE Store${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}storeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: storeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete operation
#
##############################################################################
print_v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete - DELETE Identity Provider Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}idpAttrID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: idpAttrID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet - READ All Identity Provider Attributes${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet - READ One Identity Provider Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}idpAttrID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: idpAttrID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut - UPDATE Identity Provider Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}idpAttrID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: idpAttrID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost - CREATE Identity Provider Attribute (SAML)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersGet - READ All Identity Providers${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersPost - Discover OpenID Provider Metadata${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete - DELETE Identity Provider${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDGet - READ One Identity Provider${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIdentityProvidersProviderIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDIdentityProvidersProviderIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIdentityProvidersProviderIDPut - UPDATE Identity Provider${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}providerID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: providerID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDImagesImgIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDImagesImgIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDImagesImgIDDelete - DELETE Image${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}imgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: imgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDImagesImgIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDImagesImgIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDImagesImgIDGet - READ Image${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}imgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: imgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDImagesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDImagesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDImagesPost - CREATE Image${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Disposition${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Disposition:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIntegrationsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIntegrationsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIntegrationsGet - READ Integration Metadata${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIntegrationsIntegrationIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIntegrationsIntegrationIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIntegrationsIntegrationIDGet - READ One Integration Metadata${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integrationID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: integrationID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet - READ Integration Version Metadata${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integrationID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: integrationID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet - READ Integration Version Asset Download${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integrationID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: integrationID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integrationVersionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: integrationVersionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet - READ One Integration Version Metadata${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integrationID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: integrationID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integrationVersionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: integrationVersionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet - READ Language Localization Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete - DELETE Language Localization Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}l10nStatusID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: l10nStatusID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet - READ One Language Localization Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}l10nStatusID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: l10nStatusID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut - CREATE Language Localization Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}l10nStatusID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: l10nStatusID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost - CREATE Language Localization Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesGet - READ Languages${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDDelete - DELETE Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDGet - READ One Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesLanguageIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesLanguageIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesLanguageIDPut - UPDATE Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}languageID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: languageID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDLanguagesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDLanguagesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDLanguagesPost - CREATE Language${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDLicensesGet operation
#
##############################################################################
print_v1OrganizationsOrgIDLicensesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDLicensesGet - READ All Licenses${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDLicensesLicenseIDGet operation
#
##############################################################################
print_v1OrganizationsOrgIDLicensesLicenseIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDLicensesLicenseIDGet - READ One License${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}licenseID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: licenseID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDLicensesLicenseIDNameGet operation
#
##############################################################################
print_v1OrganizationsOrgIDLicensesLicenseIDNameGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDLicensesLicenseIDNameGet - READ One License Name${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}licenseID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: licenseID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDLicensesLicenseIDNamePut operation
#
##############################################################################
print_v1OrganizationsOrgIDLicensesLicenseIDNamePut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDLicensesLicenseIDNamePut - Update One License Name${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}licenseID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: licenseID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDMfaSettingsDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDMfaSettingsDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDMfaSettingsDelete - RESET MFA Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDMfaSettingsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDMfaSettingsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDMfaSettingsGet - READ MFA Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDMfaSettingsPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDMfaSettingsPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDMfaSettingsPut - UPDATE MFA Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsDelete - DELETE Notifications Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsGet - READ Notifications Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsPut - UPDATE Notifications Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet - READ Notifications Settings (SMTP)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut - UPDATE Notifications Settings (SMTP)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesGet - READ All Templates${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete - DELETE Content${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}contentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: contentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet - READ One Content${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}contentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: contentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut - UPDATE Push Content${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}contentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: contentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete - DELETE Bulk Variant Contents${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet - READ All Contents${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch - PATCH Bulk Variant Contents${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost - CREATE Push Content${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTemplatesTemplateNameGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDTemplatesTemplateNameGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTemplatesTemplateNameGet - READ One Template${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}templateName${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: templateName=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete - DELETE Phone Delivery Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet - READ All Phone Delivery Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet - READ One Phone Delivery Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}phoneDeliverySettingsId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: phoneDeliverySettingsId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut - UPDATE Phone Delivery Settings${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}phoneDeliverySettingsId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: phoneDeliverySettingsId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost - CREATE Phone Delivery Settings (Syniverse)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet - READ All Trusted Email Addresses${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost - CREATE Trusted Email Address${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete - DELETE Trusted Email Address${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}trustedEmailId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: trustedEmailId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet - READ One Trusted Email Address${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}trustedEmailId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: trustedEmailId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost - Resend Verification Code To Email${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}trustedEmailId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: trustedEmailId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete - DELETE Trusted Email Domain${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet - READ Trusted Email Domain DKIM Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet - READ One Trusted Email Domain${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet - READ Trusted Email Domain Ownership Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet - READ Trusted Email Domain SPF Status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}emailDomainId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: emailDomainId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsGet - READ All Trusted Email Domains${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDEmailDomainsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDEmailDomainsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDEmailDomainsPost - CREATE Trusted Email Domain${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsGet operation
#
##############################################################################
print_v1OrganizationsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsGet - READ All Organizations${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1OrganizationsOrgIDGet operation
#
##############################################################################
print_v1OrganizationsOrgIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1OrganizationsOrgIDGet - READ One Organization${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}orgID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: orgID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPasswordPoliciesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPasswordPoliciesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPasswordPoliciesGet - READ All Password Policies${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet - READ One Password Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}passwordPolicyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: passwordPolicyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut - UPDATE Password Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}passwordPolicyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: passwordPolicyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createPopulation operation
#
##############################################################################
print_createPopulation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createPopulation - CREATE Population${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deletePopulation operation
#
##############################################################################
print_deletePopulation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deletePopulation - DELETE Population${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}popID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: popID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllPopulations operation
#
##############################################################################
print_readAllPopulations_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllPopulations - READ All Populations${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Adding a paging value to limit the number of resources displayed per page${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Adding a SCIM filter for a population ID or population name to display only those resources associated with the specified population. Only the id and name parameters are supported${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOnePopulation operation
#
##############################################################################
print_readOnePopulation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOnePopulation - READ One Population${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}popID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: popID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updatePopulation operation
#
##############################################################################
print_updatePopulation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updatePopulation - UPDATE Population${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}popID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: popID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createResourceAttribute operation
#
##############################################################################
print_createResourceAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createResourceAttribute - CREATE Resource Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteResourceAttribute operation
#
##############################################################################
print_deleteResourceAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteResourceAttribute - DELETE Resource Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceAttrID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceAttrID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllResourceAttributes operation
#
##############################################################################
print_readAllResourceAttributes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllResourceAttributes - READ All Resource Attributes${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneResourceAttribute operation
#
##############################################################################
print_readOneResourceAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneResourceAttribute - READ One Resource Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceAttrID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceAttrID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateResourceAttribute operation
#
##############################################################################
print_updateResourceAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateResourceAttribute - UPDATE Resource Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceAttrID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceAttrID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createResourceScope operation
#
##############################################################################
print_createResourceScope_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createResourceScope - CREATE PingOne access control scope${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteResourceScope operation
#
##############################################################################
print_deleteResourceScope_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteResourceScope - DELETE Scope${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}scopeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: scopeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllResourceScopes operation
#
##############################################################################
print_readAllResourceScopes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllResourceScopes - READ All Scopes (Resource)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneResourceScope operation
#
##############################################################################
print_readOneResourceScope_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneResourceScope - READ One Scope${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}scopeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: scopeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateResourceScope operation
#
##############################################################################
print_updateResourceScope_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateResourceScope - UPDATE PingOne access control scope${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}scopeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: scopeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createResource operation
#
##############################################################################
print_createResource_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createResource - CREATE Resource${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteResource operation
#
##############################################################################
print_deleteResource_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteResource - DELETE Resource${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllResources operation
#
##############################################################################
print_readAllResources_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllResources - READ All Resources${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneResource operation
#
##############################################################################
print_readOneResource_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneResource - READ One Resource${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateResource operation
#
##############################################################################
print_updateResource_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateResource - UPDATE Resource${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resourceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: resourceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createRiskPredictor operation
#
##############################################################################
print_createRiskPredictor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createRiskPredictor - CREATE Risk Predictor${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteRiskAdvancedPredictor operation
#
##############################################################################
print_deleteRiskAdvancedPredictor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteRiskAdvancedPredictor - DELETE Risk Advanced Predictor${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskPredictorID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskPredictorID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllRiskPredictors operation
#
##############################################################################
print_readAllRiskPredictors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllRiskPredictors - READ All Risk Predictors${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneRiskPredictor operation
#
##############################################################################
print_readOneRiskPredictor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneRiskPredictor - READ One Risk Predictor${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskPredictorID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskPredictorID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateRiskPredictor operation
#
##############################################################################
print_updateRiskPredictor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateRiskPredictor - UPDATE Risk Predictor${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskPredictorID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskPredictorID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createRiskEvaluation operation
#
##############################################################################
print_createRiskEvaluation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createRiskEvaluation - CREATE Risk Evaluation${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneRiskEvaluation operation
#
##############################################################################
print_readOneRiskEvaluation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneRiskEvaluation - READ One Risk Evaluation${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateRiskEvaluation operation
#
##############################################################################
print_updateRiskEvaluation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateRiskEvaluation - UPDATE Risk Evaluation${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createRiskPolicySet operation
#
##############################################################################
print_createRiskPolicySet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createRiskPolicySet - CREATE Risk Policy Set${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteRiskPolicySet operation
#
##############################################################################
print_deleteRiskPolicySet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteRiskPolicySet - DELETE Risk Policy Set${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskPolicySetID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskPolicySetID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneRiskPolicySet operation
#
##############################################################################
print_readOneRiskPolicySet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneRiskPolicySet - READ One Risk Policy Set${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskPolicySetID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskPolicySetID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readRiskPolicySets operation
#
##############################################################################
print_readRiskPolicySets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readRiskPolicySets - READ Risk Policy Sets${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateRiskPolicySet operation
#
##############################################################################
print_updateRiskPolicySet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateRiskPolicySet - UPDATE Risk Policy Set${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}riskPolicySetID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: riskPolicySetID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllRoles operation
#
##############################################################################
print_readAllRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllRoles - READ All Roles${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneRole operation
#
##############################################################################
print_readOneRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneRole - READ One Role${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}roleID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: roleID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createAttribute operation
#
##############################################################################
print_createAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createAttribute - CREATE Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteAttribute operation
#
##############################################################################
print_deleteAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteAttribute - DELETE Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attributeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attributeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllSchemaAttributes operation
#
##############################################################################
print_readAllSchemaAttributes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllSchemaAttributes - READ All (Schema) Attributes${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllSchemas operation
#
##############################################################################
print_readAllSchemas_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllSchemas - READ All Schemas${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneAttribute operation
#
##############################################################################
print_readOneAttribute_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneAttribute - READ One Attribute${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attributeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attributeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneSchema operation
#
##############################################################################
print_readOneSchema_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneSchema - READ One Schema${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateAttributePatch operation
#
##############################################################################
print_updateAttributePatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateAttributePatch - UPDATE Attribute (Patch)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attributeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attributeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateAttributePut operation
#
##############################################################################
print_updateAttributePut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateAttributePut - UPDATE Attribute (Put)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}schemaID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: schemaID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attributeID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: attributeID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesGet - READ All Sign On Policies${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete - DELETE Sign On Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet - READ One Sign On Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut - UPDATE Sign On Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPost - CREATE Sign On Policy${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost operation
#
##############################################################################
print_v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost - CREATE Sign-On Policy Action (AGREEMENT)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete - DELETE Sign-On Policy Action${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}actionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: actionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet - READ One Sign-On Policy Action${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}actionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: actionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut - UPDATE Sign-On Policy Action${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}actionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: actionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet - READ All Sign-On Policy Actions${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost - CREATE Sign-On Policy Action (IDENTITY_PROVIDER)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: policyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSubscriptionsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDSubscriptionsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSubscriptionsGet - READ All Subscriptions${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSubscriptionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDSubscriptionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSubscriptionsPost - CREATE Subscriptions${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete - DELETE Subscription${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}subscriptionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: subscriptionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet - READ One Subscription${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}subscriptionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: subscriptionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut - UPDATE Subscription${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}subscriptionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: subscriptionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDTotalIdentitiesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDTotalIdentitiesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDTotalIdentitiesGet - READ Total Identity Counts${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUserActivitiesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUserActivitiesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUserActivitiesGet - READ User Activities${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDEnabledGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDEnabledGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDEnabledGet - READ User Enabled${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDEnabledPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDEnabledPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDEnabledPut - UPDATE User Enabled${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet - READ User MFA Enabled${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut - UPDATE User MFA Enabled${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addUserToGroup operation
#
##############################################################################
print_addUserToGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addUserToGroup - ADD User to Group${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllGroupMembershipsForUser operation
#
##############################################################################
print_readAllGroupMembershipsForUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllGroupMembershipsForUser - READ All Group Memberships for User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}expand${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: expand=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneGroupMembershipForUser operation
#
##############################################################################
print_readOneGroupMembershipForUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneGroupMembershipForUser - READ One Group Membership for User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}groupID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: groupID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}expand${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: expand=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for removeUserFromGroup operation
#
##############################################################################
print_removeUserFromGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeUserFromGroup - REMOVE User from Group${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}groupID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: groupID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet - READ Linked Accounts${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete - DELETE Linked Account${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}linkedAccountID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: linkedAccountID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet - READ One Linked Account${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}linkedAccountID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: linkedAccountID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesDelete - DELETE Device Order${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete - DELETE MFA User Device${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deviceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: deviceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet - READ One MFA User Device${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deviceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: deviceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut - SEND MFA Device Logs${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deviceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: deviceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut - UPDATE Device Nickname${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deviceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: deviceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost - ACTIVATE MFA User Device${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deviceID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: deviceID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesGet - READ All MFA User Devices${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDDevicesPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDDevicesPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDDevicesPost - SET Device Order${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete - DELETE MFA Pairing Key${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pairingKeyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: pairingKeyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet - READ One MFA Pairing Key${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pairingKeyID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: pairingKeyID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPairingKeysPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPairingKeysPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPairingKeysPost - CREATE MFA Pairing Key${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDSessionsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDSessionsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDSessionsGet - READ All Sessions${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete - DELETE Session${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sessionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: sessionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet - READ One Session${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sessionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: sessionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPost - User Account Unlock${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}content-type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: content-type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet - READ One User Agreement Consent${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost - Revoke Agreement${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}agreementID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: agreementID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet - READ All User Agreement Consents${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet - READ All ID Verification Transaction Records for a User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost - CREATE ID Verification Transaction Record for a User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete - DELETE ID Verification Transaction Record for a User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}transactionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: transactionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet - READ ID Verification Transaction Record for a User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}transactionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: transactionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut - UPDATE ID Verification Transaction Record for a User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}transactionID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: transactionID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPasswordGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPasswordGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPasswordGet - READ Password State${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPasswordPost operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPasswordPost_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPasswordPost - Password Locked Out${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}content-type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: content-type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPasswordPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPasswordPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPasswordPut - UPDATE Password (Set)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Content-Type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: Content-Type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPopulationGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPopulationGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPopulationGet - READ User Population${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDPopulationPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDPopulationPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDPopulationPut - UPDATE User Population${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createUserRoleAssignment operation
#
##############################################################################
print_createUserRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createUserRoleAssignment - CREATE User Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteUserRoleAssignment operation
#
##############################################################################
print_deleteUserRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteUserRoleAssignment - DELETE User's Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}roleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: roleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readOneRoleAssignment operation
#
##############################################################################
print_readOneRoleAssignment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readOneRoleAssignment - READ One Role Assignment${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}roleAssignmentID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: roleAssignmentID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readUserRoleAssignments operation
#
##############################################################################
print_readUserRoleAssignments_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readUserRoleAssignments - READ Role Assignments${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for createUser operation
#
##############################################################################
print_createUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}createUser - CREATE User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}content-type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: content-type:value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=201
    echo -e "${result_color_table[${code:0:1}]}  201;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for deleteUser operation
#
##############################################################################
print_deleteUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}deleteUser - DELETE User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=204
    echo -e "${result_color_table[${code:0:1}]}  204;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readAllUsers operation
#
##############################################################################
print_readAllUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readAllUsers - READ All Users${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for readUser operation
#
##############################################################################
print_readUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}readUser - READ User${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: include=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserPatch operation
#
##############################################################################
print_updateUserPatch_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserPatch - UPDATE User (Patch)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for updateUserPut operation
#
##############################################################################
print_updateUserPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateUserPut - UPDATE User (Put)${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet - READ User Identity Provider${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut - UPDATE User Identity Provider${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet - READ user verification status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut operation
#
##############################################################################
print_v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut_help() {
    echo ""
    echo -e "${BOLD}${WHITE}v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut - UPDATE user verification status${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}envID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: envID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}userID${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: userID=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=401
    echo -e "${result_color_table[${code:0:1}]}  401;Unauthorised${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful response${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}


##############################################################################
#
# Call v1EnvironmentsEnvIDActiveIdentityCountsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDActiveIdentityCountsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter limit order  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/activeIdentityCounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter limit order samplePeriod  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/metrics/activeIdentityCounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet operation
#
##############################################################################
call_v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID licenseID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(aggregatedBy limit order  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}/licenses/{licenseID}/metrics/activeIdentityCounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages/{languageID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages/{languageID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages/{languageID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/:envID/agreements/:agreeID/languages/:langID/revisions/:revisionID" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages/{languageID}/revisions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages/{languageID}/revisions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID languageID revisionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}/languages/{languageID}/revisions/{revisionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsAgreementIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsAgreementIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements/{agreementID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAgreementsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDAgreementsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/agreements" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID alertChannelID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/alertChannels/{alertChannelID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID alertChannelsID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/alertChannels/{alertChannelsID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAlertChannelsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDAlertChannelsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/alertChannels" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDAlertChannelsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDAlertChannelsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/alertChannels" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createApplicationAttributeMapping operation
#
##############################################################################
call_createApplicationAttributeMapping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteApplicationAttributeMapping operation
#
##############################################################################
call_deleteApplicationAttributeMapping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID attrMappingID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/attributes/{attrMappingID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllApplicationAttributeMappings operation
#
##############################################################################
call_readAllApplicationAttributeMappings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneApplicationAttributeMapping operation
#
##############################################################################
call_readOneApplicationAttributeMapping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID attrMappingID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/attributes/{attrMappingID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateApplicationAttributeMapping operation
#
##############################################################################
call_updateApplicationAttributeMapping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID attrMappingID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/attributes/{attrMappingID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/pushCredentials" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/pushCredentials" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID pushCredID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/pushCredentials/{pushCredID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID pushCredID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/pushCredentials/{pushCredID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID pushCredID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/pushCredentials/{pushCredID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createApplicationGrant operation
#
##############################################################################
call_createApplicationGrant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/grants" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteApplicationGrant operation
#
##############################################################################
call_deleteApplicationGrant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID grantID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/grants/{grantID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllApplicationGrants operation
#
##############################################################################
call_readAllApplicationGrants() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/grants" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneApplicationGrant operation
#
##############################################################################
call_readOneApplicationGrant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID grantID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/grants/{grantID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateApplicationGrant operation
#
##############################################################################
call_updateApplicationGrant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID grantID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/grants/{grantID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/roleAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/roleAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID roleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/roleAssignments/{roleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID roleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/roleAssignments/{roleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readApplicationSecret operation
#
##############################################################################
call_readApplicationSecret() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/secret" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateApplicationSecret operation
#
##############################################################################
call_updateApplicationSecret() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/secret" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/signOnPolicyAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/signOnPolicyAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID SOPAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/signOnPolicyAssignments/{SOPAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID SOPAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/signOnPolicyAssignments/{SOPAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID SOPAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}/signOnPolicyAssignments/{SOPAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createApplication operation
#
##############################################################################
call_createApplication() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteApplication operation
#
##############################################################################
call_deleteApplication() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllApplications operation
#
##############################################################################
call_readAllApplications() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneApplication operation
#
##############################################################################
call_readOneApplication() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateApplication operation
#
##############################################################################
call_updateApplication() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID appID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applications/{appID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDActivitiesActivityIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDActivitiesActivityIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID activityID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/activities/{activityID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDActivitiesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDActivitiesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/activities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDActivitiesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDActivitiesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/activities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDApplicationSignonsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDApplicationSignonsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(limit samplePeriod samplePeriodCount filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/applicationSignons" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneBillOfMaterials operation
#
##############################################################################
call_readOneBillOfMaterials() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/billOfMaterials" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateBillOfMaterials operation
#
##############################################################################
call_updateBillOfMaterials() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/billOfMaterials" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDBrandingSettingsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDBrandingSettingsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/brandingSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDBrandingSettingsPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDBrandingSettingsPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/brandingSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesThemeIDDefaultGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesThemeIDDefaultGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID themeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes/{themeID}/default" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesThemeIDDefaultPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesThemeIDDefaultPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID themeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes/{themeID}/default" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesThemeIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesThemeIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID themeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes/{themeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesThemeIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesThemeIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID themeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes/{themeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDThemesThemeIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDThemesThemeIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID themeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/themes/{themeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCapabilitiesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDCapabilitiesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/capabilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDCapabilitiesGet operation
#
##############################################################################
call_v1OrganizationsOrgIDCapabilitiesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}/capabilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID certID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/certificates/{certID}/applications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCertificatesCertIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDCertificatesCertIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID certID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/certificates/{certID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCertificatesCertIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDCertificatesCertIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID certID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/certificates/{certID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCertificatesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDCertificatesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/certificates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCertificatesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDCertificatesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/certificates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDDecryptionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDDecryptionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/decryptions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEncryptionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDEncryptionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/encryptions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysKeyIDApplicationsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysKeyIDApplicationsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID keyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys/{keyID}/applications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysKeyIDCsrGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysKeyIDCsrGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID keyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys/{keyID}/csr" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysKeyIDCsrPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysKeyIDCsrPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID keyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys/{keyID}/csr" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysKeyIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysKeyIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID keyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys/{keyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysKeyIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysKeyIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID keyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys/{keyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysKeyIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysKeyIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID keyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys/{keyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDKeysPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDKeysPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/keys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSigningsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDSigningsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDVerificationsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDVerificationsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/verifications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCustomDomainsDomIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDCustomDomainsDomIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID domID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/customDomains/{domID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCustomDomainsDomIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDCustomDomainsDomIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID domID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/customDomains/{domID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCustomDomainsDomIDPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDCustomDomainsDomIDPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID domID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/customDomains/{domID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCustomDomainsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDCustomDomainsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/customDomains" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDCustomDomainsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDCustomDomainsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/customDomains" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID deviceAuthPolicyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/deviceAuthenticationPolicy/{deviceAuthPolicyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/deviceAuthenticationPolicy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createEnvironmentActiveLicense operation
#
##############################################################################
call_createEnvironmentActiveLicense() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteEnvironment operation
#
##############################################################################
call_deleteEnvironment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllEnvironments operation
#
##############################################################################
call_readAllEnvironments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(limit filter  )
    local path

    if ! path=$(build_request_path "/v1/environments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneEnvironment operation
#
##############################################################################
call_readOneEnvironment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateEnvironment operation
#
##############################################################################
call_updateEnvironment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateEnvironmentType operation
#
##############################################################################
call_updateEnvironmentType() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/type" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createGatewayCredential operation
#
##############################################################################
call_createGatewayCredential() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/credentials" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call deleteGatewayCredential operation
#
##############################################################################
call_deleteGatewayCredential() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID credentialID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/credentials/{credentialID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllGatewayInstances operation
#
##############################################################################
call_readAllGatewayInstances() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/instances" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneGatewayInstance operation
#
##############################################################################
call_readOneGatewayInstance() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID instanceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/instances/{instanceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createGatewayRoleAssignment operation
#
##############################################################################
call_createGatewayRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/roleAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteGatewayRoleAssignment operation
#
##############################################################################
call_deleteGatewayRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID gatewayRoleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readGatewayRoleAssignments operation
#
##############################################################################
call_readGatewayRoleAssignments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/roleAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneGatewayRoleAssignment operation
#
##############################################################################
call_readOneGatewayRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID gatewayRoleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateGatewayRoleAssignment operation
#
##############################################################################
call_updateGatewayRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID gatewayRoleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createGateway operation
#
##############################################################################
call_createGateway() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteGateway operation
#
##############################################################################
call_deleteGateway() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllGateways operation
#
##############################################################################
call_readAllGateways() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneGateway operation
#
##############################################################################
call_readOneGateway() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateGateway operation
#
##############################################################################
call_updateGateway() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID gatewayID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/gateways/{gatewayID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createGroup operation
#
##############################################################################
call_createGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteGroup operation
#
##############################################################################
call_deleteGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID groupID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/groups/{groupID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllGroups operation
#
##############################################################################
call_readAllGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter limit  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneGroup operation
#
##############################################################################
call_readOneGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID groupID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(include  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/groups/{groupID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateGroup operation
#
##############################################################################
call_updateGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID groupID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/groups/{groupID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationMappingMappingIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationMappingMappingIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID mappingID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/mapping/{mappingID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationMappingsMappingIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationMappingsMappingIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID mappingID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/mappings/{mappingID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationMappingsMappingIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationMappingsMappingIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID mappingID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/mappings/{mappingID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID ruleID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules/{ruleID}/mappings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID ruleID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules/{ruleID}/mappings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationPlansGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationPlansGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/plans" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationPlansPlanIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationPlansPlanIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID planID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/plans/{planID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationPlansPlanIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationPlansPlanIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID planID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/plans/{planID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationPlansPlanIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationPlansPlanIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID planID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/plans/{planID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationPlansPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationPlansPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/plans" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/revisions/id:latest" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRevisionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRevisionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/revisions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID previousRevisionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/revisions/{previousRevisionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID planID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/plans/{planID}/rules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesRuleIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesRuleIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID ruleID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules/{ruleID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesRuleIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesRuleIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID ruleID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules/{ruleID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationRulesStoreIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationRulesStoreIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID storeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/rules/{storeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/storeMetadata/Aquera" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/storeMetadata/SalesforceContacts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/storeMetadata/Salesforce" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoreMetadataScimPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoreMetadataScimPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/storeMetadata/scim" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/stores/connection/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoresGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoresGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/stores" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoresPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoresPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/stores" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoresStoreIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoresStoreIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID storeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/stores/{storeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoresStoreIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoresStoreIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID storeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/stores/{storeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPropagationStoresStoreIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDPropagationStoresStoreIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID storeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/propagation/stores/{storeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete operation
#
##############################################################################
call_v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID idpAttrID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v11/environments/{envID}/identityProviders/{providerID}/attributes/{idpAttrID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID idpAttrID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}/attributes/{idpAttrID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID idpAttrID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}/attributes/{idpAttrID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIdentityProvidersProviderIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDIdentityProvidersProviderIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID providerID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/identityProviders/{providerID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDImagesImgIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDImagesImgIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID imgID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/images/{imgID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDImagesImgIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDImagesImgIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID imgID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/images/{imgID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDImagesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDImagesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/images" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIntegrationsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIntegrationsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/integrations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIntegrationsIntegrationIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIntegrationsIntegrationIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID integrationID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/integrations/{integrationID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID integrationID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/integrations/{integrationID}/versions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID integrationID integrationVersionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/integrations/{integrationID}/versions/{integrationVersionID}/asset" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID integrationID integrationVersionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/integrations/{integrationID}/versions/{integrationVersionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID l10nStatusID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}/status/{l10nStatusID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID l10nStatusID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}/status/{l10nStatusID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID l10nStatusID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}/status/{l10nStatusID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesLanguageIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesLanguageIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID languageID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/{languageID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDLanguagesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDLanguagesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/languages/" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDLicensesGet operation
#
##############################################################################
call_v1OrganizationsOrgIDLicensesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}/licenses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDLicensesLicenseIDGet operation
#
##############################################################################
call_v1OrganizationsOrgIDLicensesLicenseIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID licenseID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}/licenses/{licenseID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDLicensesLicenseIDNameGet operation
#
##############################################################################
call_v1OrganizationsOrgIDLicensesLicenseIDNameGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID licenseID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}/licenses/{licenseID}/name" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDLicensesLicenseIDNamePut operation
#
##############################################################################
call_v1OrganizationsOrgIDLicensesLicenseIDNamePut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID licenseID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}/licenses/{licenseID}/name" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDMfaSettingsDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDMfaSettingsDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/mfaSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDMfaSettingsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDMfaSettingsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/mfaSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDMfaSettingsPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDMfaSettingsPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/mfaSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/emailDeliverySettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/emailDeliverySettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName contentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName contentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName contentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}/contents" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTemplatesTemplateNameGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDTemplatesTemplateNameGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID templateName)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/templates/{templateName}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/emailDeliverySettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/phoneDeliverySettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID phoneDeliverySettingsId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/phoneDeliverySettings/{phoneDeliverySettingsId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID phoneDeliverySettingsId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/phoneDeliverySettings/{phoneDeliverySettingsId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/notificationsSettings/phoneDeliverySettings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainID}/trustedEmails" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/trustedEmails" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId trustedEmailId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/trustedEmails/{trustedEmailId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId trustedEmailId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/trustedEmails/{trustedEmailId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId trustedEmailId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/trustedEmails/{trustedEmailId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/dkim" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/ownership" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID emailDomainId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains/{emailDomainId}/spf" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDEmailDomainsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDEmailDomainsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/emailDomains" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1OrganizationsGet operation
#
##############################################################################
call_v1OrganizationsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1OrganizationsOrgIDGet operation
#
##############################################################################
call_v1OrganizationsOrgIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(orgID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/organizations/{orgID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPasswordPoliciesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPasswordPoliciesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/passwordPolicies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID passwordPolicyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/passwordPolicies/{passwordPolicyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID passwordPolicyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/passwordPolicies/{passwordPolicyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createPopulation operation
#
##############################################################################
call_createPopulation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/populations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deletePopulation operation
#
##############################################################################
call_deletePopulation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID popID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/populations/{popID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllPopulations operation
#
##############################################################################
call_readAllPopulations() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(limit filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/populations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOnePopulation operation
#
##############################################################################
call_readOnePopulation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID popID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/populations/{popID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updatePopulation operation
#
##############################################################################
call_updatePopulation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID popID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/populations/{popID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createResourceAttribute operation
#
##############################################################################
call_createResourceAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteResourceAttribute operation
#
##############################################################################
call_deleteResourceAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID resourceAttrID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/attributes/{resourceAttrID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllResourceAttributes operation
#
##############################################################################
call_readAllResourceAttributes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneResourceAttribute operation
#
##############################################################################
call_readOneResourceAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID resourceAttrID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/attributes/{resourceAttrID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateResourceAttribute operation
#
##############################################################################
call_updateResourceAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID resourceAttrID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/attributes/{resourceAttrID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createResourceScope operation
#
##############################################################################
call_createResourceScope() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/scopes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteResourceScope operation
#
##############################################################################
call_deleteResourceScope() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID scopeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/scopes/{scopeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllResourceScopes operation
#
##############################################################################
call_readAllResourceScopes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/scopes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneResourceScope operation
#
##############################################################################
call_readOneResourceScope() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID scopeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/scopes/{scopeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateResourceScope operation
#
##############################################################################
call_updateResourceScope() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID scopeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}/scopes/{scopeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createResource operation
#
##############################################################################
call_createResource() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteResource operation
#
##############################################################################
call_deleteResource() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllResources operation
#
##############################################################################
call_readAllResources() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneResource operation
#
##############################################################################
call_readOneResource() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateResource operation
#
##############################################################################
call_updateResource() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID resourceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/resources/{resourceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createRiskPredictor operation
#
##############################################################################
call_createRiskPredictor() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPredictors" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteRiskAdvancedPredictor operation
#
##############################################################################
call_deleteRiskAdvancedPredictor() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskPredictorID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPredictors/{riskPredictorID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllRiskPredictors operation
#
##############################################################################
call_readAllRiskPredictors() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPredictors" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneRiskPredictor operation
#
##############################################################################
call_readOneRiskPredictor() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskPredictorID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPredictors/{riskPredictorID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateRiskPredictor operation
#
##############################################################################
call_updateRiskPredictor() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskPredictorID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPredictors/{riskPredictorID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createRiskEvaluation operation
#
##############################################################################
call_createRiskEvaluation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskEvaluations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call readOneRiskEvaluation operation
#
##############################################################################
call_readOneRiskEvaluation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskEvaluations/{riskID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateRiskEvaluation operation
#
##############################################################################
call_updateRiskEvaluation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskEvaluations/{riskID}/event" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createRiskPolicySet operation
#
##############################################################################
call_createRiskPolicySet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPolicySets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteRiskPolicySet operation
#
##############################################################################
call_deleteRiskPolicySet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskPolicySetID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPolicySets/{riskPolicySetID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneRiskPolicySet operation
#
##############################################################################
call_readOneRiskPolicySet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskPolicySetID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPolicySets/{riskPolicySetID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readRiskPolicySets operation
#
##############################################################################
call_readRiskPolicySets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPolicySets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateRiskPolicySet operation
#
##############################################################################
call_updateRiskPolicySet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID riskPolicySetID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/riskPolicySets/{riskPolicySetID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call readAllRoles operation
#
##############################################################################
call_readAllRoles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/roles" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneRole operation
#
##############################################################################
call_readOneRole() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(roleID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/roles/{roleID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createAttribute operation
#
##############################################################################
call_createAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteAttribute operation
#
##############################################################################
call_deleteAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID attributeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllSchemaAttributes operation
#
##############################################################################
call_readAllSchemaAttributes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}/attributes" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllSchemas operation
#
##############################################################################
call_readAllSchemas() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneAttribute operation
#
##############################################################################
call_readOneAttribute() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID attributeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneSchema operation
#
##############################################################################
call_readOneSchema() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateAttributePatch operation
#
##############################################################################
call_updateAttributePatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID attributeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateAttributePut operation
#
##############################################################################
call_updateAttributePut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID schemaID attributeID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost operation
#
##############################################################################
call_v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(policyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/9ad15e9e-3ac6-43f7-a053-d46b87d6c4a7/signOnPolicies/{policyID}/actions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID actionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}/actions/{actionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID actionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}/actions/{actionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID actionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}/actions/{actionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}/actions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID policyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/signOnPolicies/{policyID}/actions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSubscriptionsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDSubscriptionsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/subscriptions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSubscriptionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDSubscriptionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/subscriptions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID subscriptionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/subscriptions/{subscriptionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID subscriptionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/subscriptions/{subscriptionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID subscriptionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/subscriptions/{subscriptionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDTotalIdentitiesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDTotalIdentitiesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/totalIdentities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUserActivitiesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUserActivitiesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/userActivities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDEnabledGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDEnabledGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/enabled" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDEnabledPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDEnabledPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/enabled" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/mfaEnabled" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/mfaEnabled" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addUserToGroup operation
#
##############################################################################
call_addUserToGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/memberOfGroups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call readAllGroupMembershipsForUser operation
#
##############################################################################
call_readAllGroupMembershipsForUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(expand limit filter  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/memberOfGroups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneGroupMembershipForUser operation
#
##############################################################################
call_readOneGroupMembershipForUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID groupID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(expand  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/memberOfGroups/{groupID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeUserFromGroup operation
#
##############################################################################
call_removeUserFromGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID groupID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/memberOfGroups/{groupID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/linkedAccounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID linkedAccountID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/linkedAccounts/{linkedAccountID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID linkedAccountID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/linkedAccounts/{linkedAccountID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID deviceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices/{deviceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID deviceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices/{deviceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID deviceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices/{deviceID}/logs" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID deviceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices/{deviceID}/nickname" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID deviceID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices/{deviceID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDDevicesPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDDevicesPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/devices" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID pairingKeyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/pairingKeys/{pairingKeyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID pairingKeyID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/pairingKeys/{pairingKeyID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPairingKeysPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPairingKeysPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/pairingKeys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDSessionsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDSessionsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/sessions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID sessionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/sessions/{sessionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID sessionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/sessions/{sessionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/agreementConsents/{agreementID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID agreementID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/agreementConsents/{agreementID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/agreementConsents" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyTransactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyTransactions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID transactionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyTransactions/{transactionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID transactionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyTransactions/{transactionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID transactionID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyTransactions/{transactionID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPasswordGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPasswordGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/password" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPasswordPost operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPasswordPost() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/password" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPasswordPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPasswordPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/password" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPopulationGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPopulationGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/population" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDPopulationPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDPopulationPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/population" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call createUserRoleAssignment operation
#
##############################################################################
call_createUserRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/roleAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteUserRoleAssignment operation
#
##############################################################################
call_deleteUserRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID roleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/roleAssignments/{roleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readOneRoleAssignment operation
#
##############################################################################
call_readOneRoleAssignment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID roleAssignmentID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/roleAssignments/{roleAssignmentID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readUserRoleAssignments operation
#
##############################################################################
call_readUserRoleAssignments() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/roleAssignments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call createUser operation
#
##############################################################################
call_createUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call deleteUser operation
#
##############################################################################
call_deleteUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readAllUsers operation
#
##############################################################################
call_readAllUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter limit  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call readUser operation
#
##############################################################################
call_readUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(include  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateUserPatch operation
#
##############################################################################
call_updateUserPatch() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateUserPut operation
#
##############################################################################
call_updateUserPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/identityProvider" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/identityProvider" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyStatus" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut operation
#
##############################################################################
call_v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(envID userID)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/v1/environments/{envID}/users/{userID}/verifyStatus" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambigously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}



##############################################################################
#
# Main
#
##############################################################################


# Check dependencies
type curl >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'cURL' installed."; exit 1; }
type sed >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'sed' installed."; exit 1; }
type column >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'bsdmainutils' installed."; exit 1; }

#
# Process command line
#
# Pass all arguments before 'operation' to cURL except the ones we override
#
take_user=false
take_host=false
take_accept_header=false
take_contenttype_header=false

for key in "$@"; do
# Take the value of -u|--user argument
if [[ "$take_user" = true ]]; then
    basic_auth_credential="$key"
    take_user=false
    continue
fi
# Take the value of --host argument
if [[ "$take_host" = true ]]; then
    host="$key"
    take_host=false
    continue
fi
# Take the value of --accept argument
if [[ "$take_accept_header" = true ]]; then
    header_accept=$(lookup_mime_type "$key")
    take_accept_header=false
    continue
fi
# Take the value of --content-type argument
if [[ "$take_contenttype_header" = true ]]; then
    header_content_type=$(lookup_mime_type "$key")
    take_contenttype_header=false
    continue
fi
case $key in
    -h|--help)
    if [[ "x$operation" == "x" ]]; then
        print_help
        exit 0
    else
        eval "print_${operation}_help"
        exit 0
    fi
    ;;
    -V|--version)
    print_version
    exit 0
    ;;
    --about)
    print_about
    exit 0
    ;;
    -u|--user)
    take_user=true
    ;;
    --host)
    take_host=true
    ;;
    --force)
    force=true
    ;;
    -ac|--accept)
    take_accept_header=true
    ;;
    -ct|--content-type)
    take_contenttype_header=true
    ;;
    --dry-run)
    print_curl=true
    ;;
    -nc|--no-colors)
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        MAGENTA=""
        CYAN=""
        WHITE=""
        BOLD=""
        OFF=""
        result_color_table=( "" "" "" "" "" "" "" )
    ;;
    v1EnvironmentsEnvIDActiveIdentityCountsGet)
    operation="v1EnvironmentsEnvIDActiveIdentityCountsGet"
    ;;
    v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet)
    operation="v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet"
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet)
    operation="v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete)
    operation="v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDDelete)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDDelete"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDGet)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDGet"
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDPut)
    operation="v1EnvironmentsEnvIDAgreementsAgreementIDPut"
    ;;
    v1EnvironmentsEnvIDAgreementsGet)
    operation="v1EnvironmentsEnvIDAgreementsGet"
    ;;
    v1EnvironmentsEnvIDAgreementsPost)
    operation="v1EnvironmentsEnvIDAgreementsPost"
    ;;
    v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut)
    operation="v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut"
    ;;
    v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete)
    operation="v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete"
    ;;
    v1EnvironmentsEnvIDAlertChannelsGet)
    operation="v1EnvironmentsEnvIDAlertChannelsGet"
    ;;
    v1EnvironmentsEnvIDAlertChannelsPost)
    operation="v1EnvironmentsEnvIDAlertChannelsPost"
    ;;
    createApplicationAttributeMapping)
    operation="createApplicationAttributeMapping"
    ;;
    deleteApplicationAttributeMapping)
    operation="deleteApplicationAttributeMapping"
    ;;
    readAllApplicationAttributeMappings)
    operation="readAllApplicationAttributeMappings"
    ;;
    readOneApplicationAttributeMapping)
    operation="readOneApplicationAttributeMapping"
    ;;
    updateApplicationAttributeMapping)
    operation="updateApplicationAttributeMapping"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet)
    operation="v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost)
    operation="v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete)
    operation="v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet)
    operation="v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut)
    operation="v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut"
    ;;
    createApplicationGrant)
    operation="createApplicationGrant"
    ;;
    deleteApplicationGrant)
    operation="deleteApplicationGrant"
    ;;
    readAllApplicationGrants)
    operation="readAllApplicationGrants"
    ;;
    readOneApplicationGrant)
    operation="readOneApplicationGrant"
    ;;
    updateApplicationGrant)
    operation="updateApplicationGrant"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet)
    operation="v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost)
    operation="v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete)
    operation="v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet)
    operation="v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet"
    ;;
    readApplicationSecret)
    operation="readApplicationSecret"
    ;;
    updateApplicationSecret)
    operation="updateApplicationSecret"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet)
    operation="v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost)
    operation="v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete)
    operation="v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet)
    operation="v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet"
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut)
    operation="v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut"
    ;;
    createApplication)
    operation="createApplication"
    ;;
    deleteApplication)
    operation="deleteApplication"
    ;;
    readAllApplications)
    operation="readAllApplications"
    ;;
    readOneApplication)
    operation="readOneApplication"
    ;;
    updateApplication)
    operation="updateApplication"
    ;;
    v1EnvironmentsEnvIDActivitiesActivityIDGet)
    operation="v1EnvironmentsEnvIDActivitiesActivityIDGet"
    ;;
    v1EnvironmentsEnvIDActivitiesGet)
    operation="v1EnvironmentsEnvIDActivitiesGet"
    ;;
    v1EnvironmentsEnvIDActivitiesPost)
    operation="v1EnvironmentsEnvIDActivitiesPost"
    ;;
    v1EnvironmentsEnvIDApplicationSignonsGet)
    operation="v1EnvironmentsEnvIDApplicationSignonsGet"
    ;;
    readOneBillOfMaterials)
    operation="readOneBillOfMaterials"
    ;;
    updateBillOfMaterials)
    operation="updateBillOfMaterials"
    ;;
    v1EnvironmentsEnvIDBrandingSettingsGet)
    operation="v1EnvironmentsEnvIDBrandingSettingsGet"
    ;;
    v1EnvironmentsEnvIDBrandingSettingsPut)
    operation="v1EnvironmentsEnvIDBrandingSettingsPut"
    ;;
    v1EnvironmentsEnvIDThemesGet)
    operation="v1EnvironmentsEnvIDThemesGet"
    ;;
    v1EnvironmentsEnvIDThemesPost)
    operation="v1EnvironmentsEnvIDThemesPost"
    ;;
    v1EnvironmentsEnvIDThemesThemeIDDefaultGet)
    operation="v1EnvironmentsEnvIDThemesThemeIDDefaultGet"
    ;;
    v1EnvironmentsEnvIDThemesThemeIDDefaultPut)
    operation="v1EnvironmentsEnvIDThemesThemeIDDefaultPut"
    ;;
    v1EnvironmentsEnvIDThemesThemeIDDelete)
    operation="v1EnvironmentsEnvIDThemesThemeIDDelete"
    ;;
    v1EnvironmentsEnvIDThemesThemeIDGet)
    operation="v1EnvironmentsEnvIDThemesThemeIDGet"
    ;;
    v1EnvironmentsEnvIDThemesThemeIDPut)
    operation="v1EnvironmentsEnvIDThemesThemeIDPut"
    ;;
    v1EnvironmentsEnvIDCapabilitiesGet)
    operation="v1EnvironmentsEnvIDCapabilitiesGet"
    ;;
    v1OrganizationsOrgIDCapabilitiesGet)
    operation="v1OrganizationsOrgIDCapabilitiesGet"
    ;;
    v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet)
    operation="v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet"
    ;;
    v1EnvironmentsEnvIDCertificatesCertIDDelete)
    operation="v1EnvironmentsEnvIDCertificatesCertIDDelete"
    ;;
    v1EnvironmentsEnvIDCertificatesCertIDGet)
    operation="v1EnvironmentsEnvIDCertificatesCertIDGet"
    ;;
    v1EnvironmentsEnvIDCertificatesGet)
    operation="v1EnvironmentsEnvIDCertificatesGet"
    ;;
    v1EnvironmentsEnvIDCertificatesPost)
    operation="v1EnvironmentsEnvIDCertificatesPost"
    ;;
    v1EnvironmentsEnvIDDecryptionsPost)
    operation="v1EnvironmentsEnvIDDecryptionsPost"
    ;;
    v1EnvironmentsEnvIDEncryptionsPost)
    operation="v1EnvironmentsEnvIDEncryptionsPost"
    ;;
    v1EnvironmentsEnvIDKeysGet)
    operation="v1EnvironmentsEnvIDKeysGet"
    ;;
    v1EnvironmentsEnvIDKeysKeyIDApplicationsGet)
    operation="v1EnvironmentsEnvIDKeysKeyIDApplicationsGet"
    ;;
    v1EnvironmentsEnvIDKeysKeyIDCsrGet)
    operation="v1EnvironmentsEnvIDKeysKeyIDCsrGet"
    ;;
    v1EnvironmentsEnvIDKeysKeyIDCsrPut)
    operation="v1EnvironmentsEnvIDKeysKeyIDCsrPut"
    ;;
    v1EnvironmentsEnvIDKeysKeyIDDelete)
    operation="v1EnvironmentsEnvIDKeysKeyIDDelete"
    ;;
    v1EnvironmentsEnvIDKeysKeyIDGet)
    operation="v1EnvironmentsEnvIDKeysKeyIDGet"
    ;;
    v1EnvironmentsEnvIDKeysKeyIDPut)
    operation="v1EnvironmentsEnvIDKeysKeyIDPut"
    ;;
    v1EnvironmentsEnvIDKeysPost)
    operation="v1EnvironmentsEnvIDKeysPost"
    ;;
    v1EnvironmentsEnvIDSigningsPost)
    operation="v1EnvironmentsEnvIDSigningsPost"
    ;;
    v1EnvironmentsEnvIDVerificationsPost)
    operation="v1EnvironmentsEnvIDVerificationsPost"
    ;;
    v1EnvironmentsEnvIDCustomDomainsDomIDDelete)
    operation="v1EnvironmentsEnvIDCustomDomainsDomIDDelete"
    ;;
    v1EnvironmentsEnvIDCustomDomainsDomIDGet)
    operation="v1EnvironmentsEnvIDCustomDomainsDomIDGet"
    ;;
    v1EnvironmentsEnvIDCustomDomainsDomIDPost)
    operation="v1EnvironmentsEnvIDCustomDomainsDomIDPost"
    ;;
    v1EnvironmentsEnvIDCustomDomainsGet)
    operation="v1EnvironmentsEnvIDCustomDomainsGet"
    ;;
    v1EnvironmentsEnvIDCustomDomainsPost)
    operation="v1EnvironmentsEnvIDCustomDomainsPost"
    ;;
    v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut)
    operation="v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut"
    ;;
    v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet)
    operation="v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet"
    ;;
    createEnvironmentActiveLicense)
    operation="createEnvironmentActiveLicense"
    ;;
    deleteEnvironment)
    operation="deleteEnvironment"
    ;;
    readAllEnvironments)
    operation="readAllEnvironments"
    ;;
    readOneEnvironment)
    operation="readOneEnvironment"
    ;;
    updateEnvironment)
    operation="updateEnvironment"
    ;;
    updateEnvironmentType)
    operation="updateEnvironmentType"
    ;;
    createGatewayCredential)
    operation="createGatewayCredential"
    ;;
    deleteGatewayCredential)
    operation="deleteGatewayCredential"
    ;;
    readAllGatewayInstances)
    operation="readAllGatewayInstances"
    ;;
    readOneGatewayInstance)
    operation="readOneGatewayInstance"
    ;;
    createGatewayRoleAssignment)
    operation="createGatewayRoleAssignment"
    ;;
    deleteGatewayRoleAssignment)
    operation="deleteGatewayRoleAssignment"
    ;;
    readGatewayRoleAssignments)
    operation="readGatewayRoleAssignments"
    ;;
    readOneGatewayRoleAssignment)
    operation="readOneGatewayRoleAssignment"
    ;;
    updateGatewayRoleAssignment)
    operation="updateGatewayRoleAssignment"
    ;;
    createGateway)
    operation="createGateway"
    ;;
    deleteGateway)
    operation="deleteGateway"
    ;;
    readAllGateways)
    operation="readAllGateways"
    ;;
    readOneGateway)
    operation="readOneGateway"
    ;;
    updateGateway)
    operation="updateGateway"
    ;;
    createGroup)
    operation="createGroup"
    ;;
    deleteGroup)
    operation="deleteGroup"
    ;;
    readAllGroups)
    operation="readAllGroups"
    ;;
    readOneGroup)
    operation="readOneGroup"
    ;;
    updateGroup)
    operation="updateGroup"
    ;;
    v1EnvironmentsEnvIDPropagationMappingMappingIDDelete)
    operation="v1EnvironmentsEnvIDPropagationMappingMappingIDDelete"
    ;;
    v1EnvironmentsEnvIDPropagationMappingsMappingIDGet)
    operation="v1EnvironmentsEnvIDPropagationMappingsMappingIDGet"
    ;;
    v1EnvironmentsEnvIDPropagationMappingsMappingIDPut)
    operation="v1EnvironmentsEnvIDPropagationMappingsMappingIDPut"
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet)
    operation="v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet"
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost)
    operation="v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost"
    ;;
    v1EnvironmentsEnvIDPropagationPlansGet)
    operation="v1EnvironmentsEnvIDPropagationPlansGet"
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDDelete)
    operation="v1EnvironmentsEnvIDPropagationPlansPlanIDDelete"
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDGet)
    operation="v1EnvironmentsEnvIDPropagationPlansPlanIDGet"
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDPut)
    operation="v1EnvironmentsEnvIDPropagationPlansPlanIDPut"
    ;;
    v1EnvironmentsEnvIDPropagationPlansPost)
    operation="v1EnvironmentsEnvIDPropagationPlansPost"
    ;;
    v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet)
    operation="v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet"
    ;;
    v1EnvironmentsEnvIDPropagationRevisionsPost)
    operation="v1EnvironmentsEnvIDPropagationRevisionsPost"
    ;;
    v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet)
    operation="v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet"
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet)
    operation="v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet"
    ;;
    v1EnvironmentsEnvIDPropagationRulesGet)
    operation="v1EnvironmentsEnvIDPropagationRulesGet"
    ;;
    v1EnvironmentsEnvIDPropagationRulesPost)
    operation="v1EnvironmentsEnvIDPropagationRulesPost"
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDDelete)
    operation="v1EnvironmentsEnvIDPropagationRulesRuleIDDelete"
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDGet)
    operation="v1EnvironmentsEnvIDPropagationRulesRuleIDGet"
    ;;
    v1EnvironmentsEnvIDPropagationRulesStoreIDPut)
    operation="v1EnvironmentsEnvIDPropagationRulesStoreIDPut"
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost)
    operation="v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost"
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost)
    operation="v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost"
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost)
    operation="v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost"
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataScimPost)
    operation="v1EnvironmentsEnvIDPropagationStoreMetadataScimPost"
    ;;
    v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost)
    operation="v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost"
    ;;
    v1EnvironmentsEnvIDPropagationStoresGet)
    operation="v1EnvironmentsEnvIDPropagationStoresGet"
    ;;
    v1EnvironmentsEnvIDPropagationStoresPost)
    operation="v1EnvironmentsEnvIDPropagationStoresPost"
    ;;
    v1EnvironmentsEnvIDPropagationStoresStoreIDDelete)
    operation="v1EnvironmentsEnvIDPropagationStoresStoreIDDelete"
    ;;
    v1EnvironmentsEnvIDPropagationStoresStoreIDGet)
    operation="v1EnvironmentsEnvIDPropagationStoresStoreIDGet"
    ;;
    v1EnvironmentsEnvIDPropagationStoresStoreIDPut)
    operation="v1EnvironmentsEnvIDPropagationStoresStoreIDPut"
    ;;
    v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete)
    operation="v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersGet)
    operation="v1EnvironmentsEnvIDIdentityProvidersGet"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersPost)
    operation="v1EnvironmentsEnvIDIdentityProvidersPost"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDGet)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDGet"
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDPut)
    operation="v1EnvironmentsEnvIDIdentityProvidersProviderIDPut"
    ;;
    v1EnvironmentsEnvIDImagesImgIDDelete)
    operation="v1EnvironmentsEnvIDImagesImgIDDelete"
    ;;
    v1EnvironmentsEnvIDImagesImgIDGet)
    operation="v1EnvironmentsEnvIDImagesImgIDGet"
    ;;
    v1EnvironmentsEnvIDImagesPost)
    operation="v1EnvironmentsEnvIDImagesPost"
    ;;
    v1EnvironmentsEnvIDIntegrationsGet)
    operation="v1EnvironmentsEnvIDIntegrationsGet"
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDGet)
    operation="v1EnvironmentsEnvIDIntegrationsIntegrationIDGet"
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet)
    operation="v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet"
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet)
    operation="v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet"
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet)
    operation="v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost"
    ;;
    v1EnvironmentsEnvIDLanguagesGet)
    operation="v1EnvironmentsEnvIDLanguagesGet"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDDelete)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDDelete"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDGet)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDGet"
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDPut)
    operation="v1EnvironmentsEnvIDLanguagesLanguageIDPut"
    ;;
    v1EnvironmentsEnvIDLanguagesPost)
    operation="v1EnvironmentsEnvIDLanguagesPost"
    ;;
    v1OrganizationsOrgIDLicensesGet)
    operation="v1OrganizationsOrgIDLicensesGet"
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDGet)
    operation="v1OrganizationsOrgIDLicensesLicenseIDGet"
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDNameGet)
    operation="v1OrganizationsOrgIDLicensesLicenseIDNameGet"
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDNamePut)
    operation="v1OrganizationsOrgIDLicensesLicenseIDNamePut"
    ;;
    v1EnvironmentsEnvIDMfaSettingsDelete)
    operation="v1EnvironmentsEnvIDMfaSettingsDelete"
    ;;
    v1EnvironmentsEnvIDMfaSettingsGet)
    operation="v1EnvironmentsEnvIDMfaSettingsGet"
    ;;
    v1EnvironmentsEnvIDMfaSettingsPut)
    operation="v1EnvironmentsEnvIDMfaSettingsPut"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsDelete)
    operation="v1EnvironmentsEnvIDNotificationsSettingsDelete"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsGet)
    operation="v1EnvironmentsEnvIDNotificationsSettingsGet"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPut)
    operation="v1EnvironmentsEnvIDNotificationsSettingsPut"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet)
    operation="v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut)
    operation="v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut"
    ;;
    v1EnvironmentsEnvIDTemplatesGet)
    operation="v1EnvironmentsEnvIDTemplatesGet"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost"
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameGet)
    operation="v1EnvironmentsEnvIDTemplatesTemplateNameGet"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete)
    operation="v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet)
    operation="v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet)
    operation="v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut)
    operation="v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut"
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost)
    operation="v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet)
    operation="v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsGet)
    operation="v1EnvironmentsEnvIDEmailDomainsGet"
    ;;
    v1EnvironmentsEnvIDEmailDomainsPost)
    operation="v1EnvironmentsEnvIDEmailDomainsPost"
    ;;
    v1OrganizationsGet)
    operation="v1OrganizationsGet"
    ;;
    v1OrganizationsOrgIDGet)
    operation="v1OrganizationsOrgIDGet"
    ;;
    v1EnvironmentsEnvIDPasswordPoliciesGet)
    operation="v1EnvironmentsEnvIDPasswordPoliciesGet"
    ;;
    v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet)
    operation="v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet"
    ;;
    v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut)
    operation="v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut"
    ;;
    createPopulation)
    operation="createPopulation"
    ;;
    deletePopulation)
    operation="deletePopulation"
    ;;
    readAllPopulations)
    operation="readAllPopulations"
    ;;
    readOnePopulation)
    operation="readOnePopulation"
    ;;
    updatePopulation)
    operation="updatePopulation"
    ;;
    createResourceAttribute)
    operation="createResourceAttribute"
    ;;
    deleteResourceAttribute)
    operation="deleteResourceAttribute"
    ;;
    readAllResourceAttributes)
    operation="readAllResourceAttributes"
    ;;
    readOneResourceAttribute)
    operation="readOneResourceAttribute"
    ;;
    updateResourceAttribute)
    operation="updateResourceAttribute"
    ;;
    createResourceScope)
    operation="createResourceScope"
    ;;
    deleteResourceScope)
    operation="deleteResourceScope"
    ;;
    readAllResourceScopes)
    operation="readAllResourceScopes"
    ;;
    readOneResourceScope)
    operation="readOneResourceScope"
    ;;
    updateResourceScope)
    operation="updateResourceScope"
    ;;
    createResource)
    operation="createResource"
    ;;
    deleteResource)
    operation="deleteResource"
    ;;
    readAllResources)
    operation="readAllResources"
    ;;
    readOneResource)
    operation="readOneResource"
    ;;
    updateResource)
    operation="updateResource"
    ;;
    createRiskPredictor)
    operation="createRiskPredictor"
    ;;
    deleteRiskAdvancedPredictor)
    operation="deleteRiskAdvancedPredictor"
    ;;
    readAllRiskPredictors)
    operation="readAllRiskPredictors"
    ;;
    readOneRiskPredictor)
    operation="readOneRiskPredictor"
    ;;
    updateRiskPredictor)
    operation="updateRiskPredictor"
    ;;
    createRiskEvaluation)
    operation="createRiskEvaluation"
    ;;
    readOneRiskEvaluation)
    operation="readOneRiskEvaluation"
    ;;
    updateRiskEvaluation)
    operation="updateRiskEvaluation"
    ;;
    createRiskPolicySet)
    operation="createRiskPolicySet"
    ;;
    deleteRiskPolicySet)
    operation="deleteRiskPolicySet"
    ;;
    readOneRiskPolicySet)
    operation="readOneRiskPolicySet"
    ;;
    readRiskPolicySets)
    operation="readRiskPolicySets"
    ;;
    updateRiskPolicySet)
    operation="updateRiskPolicySet"
    ;;
    readAllRoles)
    operation="readAllRoles"
    ;;
    readOneRole)
    operation="readOneRole"
    ;;
    createAttribute)
    operation="createAttribute"
    ;;
    deleteAttribute)
    operation="deleteAttribute"
    ;;
    readAllSchemaAttributes)
    operation="readAllSchemaAttributes"
    ;;
    readAllSchemas)
    operation="readAllSchemas"
    ;;
    readOneAttribute)
    operation="readOneAttribute"
    ;;
    readOneSchema)
    operation="readOneSchema"
    ;;
    updateAttributePatch)
    operation="updateAttributePatch"
    ;;
    updateAttributePut)
    operation="updateAttributePut"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesGet)
    operation="v1EnvironmentsEnvIDSignOnPoliciesGet"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPost)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPost"
    ;;
    v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost)
    operation="v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet"
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost)
    operation="v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost"
    ;;
    v1EnvironmentsEnvIDSubscriptionsGet)
    operation="v1EnvironmentsEnvIDSubscriptionsGet"
    ;;
    v1EnvironmentsEnvIDSubscriptionsPost)
    operation="v1EnvironmentsEnvIDSubscriptionsPost"
    ;;
    v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete)
    operation="v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete"
    ;;
    v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet)
    operation="v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet"
    ;;
    v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut)
    operation="v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut"
    ;;
    v1EnvironmentsEnvIDTotalIdentitiesGet)
    operation="v1EnvironmentsEnvIDTotalIdentitiesGet"
    ;;
    v1EnvironmentsEnvIDUserActivitiesGet)
    operation="v1EnvironmentsEnvIDUserActivitiesGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDEnabledGet)
    operation="v1EnvironmentsEnvIDUsersUserIDEnabledGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDEnabledPut)
    operation="v1EnvironmentsEnvIDUsersUserIDEnabledPut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet)
    operation="v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut)
    operation="v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut"
    ;;
    addUserToGroup)
    operation="addUserToGroup"
    ;;
    readAllGroupMembershipsForUser)
    operation="readAllGroupMembershipsForUser"
    ;;
    readOneGroupMembershipForUser)
    operation="readOneGroupMembershipForUser"
    ;;
    removeUserFromGroup)
    operation="removeUserFromGroup"
    ;;
    v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet)
    operation="v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete)
    operation="v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete"
    ;;
    v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet)
    operation="v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDelete)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesDelete"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesGet)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesPost)
    operation="v1EnvironmentsEnvIDUsersUserIDDevicesPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete)
    operation="v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet)
    operation="v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPairingKeysPost)
    operation="v1EnvironmentsEnvIDUsersUserIDPairingKeysPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDSessionsGet)
    operation="v1EnvironmentsEnvIDUsersUserIDSessionsGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete)
    operation="v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete"
    ;;
    v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet)
    operation="v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPost)
    operation="v1EnvironmentsEnvIDUsersUserIDPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet)
    operation="v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost)
    operation="v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet)
    operation="v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPasswordGet)
    operation="v1EnvironmentsEnvIDUsersUserIDPasswordGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPasswordPost)
    operation="v1EnvironmentsEnvIDUsersUserIDPasswordPost"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPasswordPut)
    operation="v1EnvironmentsEnvIDUsersUserIDPasswordPut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPopulationGet)
    operation="v1EnvironmentsEnvIDUsersUserIDPopulationGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDPopulationPut)
    operation="v1EnvironmentsEnvIDUsersUserIDPopulationPut"
    ;;
    createUserRoleAssignment)
    operation="createUserRoleAssignment"
    ;;
    deleteUserRoleAssignment)
    operation="deleteUserRoleAssignment"
    ;;
    readOneRoleAssignment)
    operation="readOneRoleAssignment"
    ;;
    readUserRoleAssignments)
    operation="readUserRoleAssignments"
    ;;
    createUser)
    operation="createUser"
    ;;
    deleteUser)
    operation="deleteUser"
    ;;
    readAllUsers)
    operation="readAllUsers"
    ;;
    readUser)
    operation="readUser"
    ;;
    updateUserPatch)
    operation="updateUserPatch"
    ;;
    updateUserPut)
    operation="updateUserPut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet)
    operation="v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut)
    operation="v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet"
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut)
    operation="v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut"
    ;;
    *==*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content as strings
    if [[ "$operation" ]]; then
        IFS='==' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]="\"${body_value}\""
    fi
    ;;
    *:=*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content without qoutes
    if [[ "$operation" ]]; then
        # ignore error about 'sep' being unused
        # shellcheck disable=SC2034
        IFS=':=' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]=${body_value}
    fi
    ;;
    +([^=]):*)
    # Parse header arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS=':' read -r header_name header_value <<< "$key"
        header_arguments[$header_name]=$header_value
    else
        curl_arguments+=" $key"
    fi
    ;;
    -)
    body_content_temp_file=$(mktemp)
    cat - > "$body_content_temp_file"
    ;;
    *=*)
    # Parse operation arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS='=' read -r parameter_name parameter_value <<< "$key"
        if [[ -z "${operation_parameters[$parameter_name]+foo}" ]]; then
            operation_parameters[$parameter_name]=$(url_escape "${parameter_value}")
        else
            operation_parameters[$parameter_name]+=":::"$(url_escape "${parameter_value}")
        fi
    else
        curl_arguments+=" $key"
    fi
    ;;
    *)
    # If we are before the operation, treat the arguments as cURL arguments
    if [[ "x$operation" == "x" ]]; then
        # Maintain quotes around cURL arguments if necessary
        space_regexp="[[:space:]]"
        if [[ $key =~ $space_regexp ]]; then
            curl_arguments+=" \"$key\""
        else
            curl_arguments+=" $key"
        fi
    fi
    ;;
esac
done


# Check if user provided host name
if [[ -z "$host" ]]; then
    ERROR_MSG="ERROR: No hostname provided!!! You have to  provide on command line option '--host ...'"
    exit 1
fi

# Check if user specified operation ID
if [[ -z "$operation" ]]; then
    ERROR_MSG="ERROR: No operation specified!!!"
    exit 1
fi


# Run cURL command based on the operation ID
case $operation in
    v1EnvironmentsEnvIDActiveIdentityCountsGet)
    call_v1EnvironmentsEnvIDActiveIdentityCountsGet
    ;;
    v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet)
    call_v1EnvironmentsEnvIDMetricsActiveIdentityCountsGet
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet)
    call_v1OrganizationsOrgIDLicensesLicenseIDMetricsActiveIdentityCountsGet
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesGet
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDDelete
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDGet
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDPut
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesPost
    ;;
    v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete)
    call_v1EnvironmentsEnvIDAgreementsAgreeIDLanguagesLangIDRevisionsRevisionIDDelete
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsGet
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsPost
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDLanguagesLanguageIDRevisionsRevisionIDGet
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDDelete)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDDelete
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDGet)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDGet
    ;;
    v1EnvironmentsEnvIDAgreementsAgreementIDPut)
    call_v1EnvironmentsEnvIDAgreementsAgreementIDPut
    ;;
    v1EnvironmentsEnvIDAgreementsGet)
    call_v1EnvironmentsEnvIDAgreementsGet
    ;;
    v1EnvironmentsEnvIDAgreementsPost)
    call_v1EnvironmentsEnvIDAgreementsPost
    ;;
    v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut)
    call_v1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut
    ;;
    v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete)
    call_v1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete
    ;;
    v1EnvironmentsEnvIDAlertChannelsGet)
    call_v1EnvironmentsEnvIDAlertChannelsGet
    ;;
    v1EnvironmentsEnvIDAlertChannelsPost)
    call_v1EnvironmentsEnvIDAlertChannelsPost
    ;;
    createApplicationAttributeMapping)
    call_createApplicationAttributeMapping
    ;;
    deleteApplicationAttributeMapping)
    call_deleteApplicationAttributeMapping
    ;;
    readAllApplicationAttributeMappings)
    call_readAllApplicationAttributeMappings
    ;;
    readOneApplicationAttributeMapping)
    call_readOneApplicationAttributeMapping
    ;;
    updateApplicationAttributeMapping)
    call_updateApplicationAttributeMapping
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet)
    call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsGet
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost)
    call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPost
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete)
    call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDDelete
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet)
    call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDGet
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut)
    call_v1EnvironmentsEnvIDApplicationsAppIDPushCredentialsPushCredIDPut
    ;;
    createApplicationGrant)
    call_createApplicationGrant
    ;;
    deleteApplicationGrant)
    call_deleteApplicationGrant
    ;;
    readAllApplicationGrants)
    call_readAllApplicationGrants
    ;;
    readOneApplicationGrant)
    call_readOneApplicationGrant
    ;;
    updateApplicationGrant)
    call_updateApplicationGrant
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet)
    call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsGet
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost)
    call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsPost
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete)
    call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDDelete
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet)
    call_v1EnvironmentsEnvIDApplicationsAppIDRoleAssignmentsRoleAssignmentIDGet
    ;;
    readApplicationSecret)
    call_readApplicationSecret
    ;;
    updateApplicationSecret)
    call_updateApplicationSecret
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet)
    call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsGet
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost)
    call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsPost
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete)
    call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDDelete
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet)
    call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDGet
    ;;
    v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut)
    call_v1EnvironmentsEnvIDApplicationsAppIDSignOnPolicyAssignmentsSOPAssignmentIDPut
    ;;
    createApplication)
    call_createApplication
    ;;
    deleteApplication)
    call_deleteApplication
    ;;
    readAllApplications)
    call_readAllApplications
    ;;
    readOneApplication)
    call_readOneApplication
    ;;
    updateApplication)
    call_updateApplication
    ;;
    v1EnvironmentsEnvIDActivitiesActivityIDGet)
    call_v1EnvironmentsEnvIDActivitiesActivityIDGet
    ;;
    v1EnvironmentsEnvIDActivitiesGet)
    call_v1EnvironmentsEnvIDActivitiesGet
    ;;
    v1EnvironmentsEnvIDActivitiesPost)
    call_v1EnvironmentsEnvIDActivitiesPost
    ;;
    v1EnvironmentsEnvIDApplicationSignonsGet)
    call_v1EnvironmentsEnvIDApplicationSignonsGet
    ;;
    readOneBillOfMaterials)
    call_readOneBillOfMaterials
    ;;
    updateBillOfMaterials)
    call_updateBillOfMaterials
    ;;
    v1EnvironmentsEnvIDBrandingSettingsGet)
    call_v1EnvironmentsEnvIDBrandingSettingsGet
    ;;
    v1EnvironmentsEnvIDBrandingSettingsPut)
    call_v1EnvironmentsEnvIDBrandingSettingsPut
    ;;
    v1EnvironmentsEnvIDThemesGet)
    call_v1EnvironmentsEnvIDThemesGet
    ;;
    v1EnvironmentsEnvIDThemesPost)
    call_v1EnvironmentsEnvIDThemesPost
    ;;
    v1EnvironmentsEnvIDThemesThemeIDDefaultGet)
    call_v1EnvironmentsEnvIDThemesThemeIDDefaultGet
    ;;
    v1EnvironmentsEnvIDThemesThemeIDDefaultPut)
    call_v1EnvironmentsEnvIDThemesThemeIDDefaultPut
    ;;
    v1EnvironmentsEnvIDThemesThemeIDDelete)
    call_v1EnvironmentsEnvIDThemesThemeIDDelete
    ;;
    v1EnvironmentsEnvIDThemesThemeIDGet)
    call_v1EnvironmentsEnvIDThemesThemeIDGet
    ;;
    v1EnvironmentsEnvIDThemesThemeIDPut)
    call_v1EnvironmentsEnvIDThemesThemeIDPut
    ;;
    v1EnvironmentsEnvIDCapabilitiesGet)
    call_v1EnvironmentsEnvIDCapabilitiesGet
    ;;
    v1OrganizationsOrgIDCapabilitiesGet)
    call_v1OrganizationsOrgIDCapabilitiesGet
    ;;
    v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet)
    call_v1EnvironmentsEnvIDCertificatesCertIDApplicationsGet
    ;;
    v1EnvironmentsEnvIDCertificatesCertIDDelete)
    call_v1EnvironmentsEnvIDCertificatesCertIDDelete
    ;;
    v1EnvironmentsEnvIDCertificatesCertIDGet)
    call_v1EnvironmentsEnvIDCertificatesCertIDGet
    ;;
    v1EnvironmentsEnvIDCertificatesGet)
    call_v1EnvironmentsEnvIDCertificatesGet
    ;;
    v1EnvironmentsEnvIDCertificatesPost)
    call_v1EnvironmentsEnvIDCertificatesPost
    ;;
    v1EnvironmentsEnvIDDecryptionsPost)
    call_v1EnvironmentsEnvIDDecryptionsPost
    ;;
    v1EnvironmentsEnvIDEncryptionsPost)
    call_v1EnvironmentsEnvIDEncryptionsPost
    ;;
    v1EnvironmentsEnvIDKeysGet)
    call_v1EnvironmentsEnvIDKeysGet
    ;;
    v1EnvironmentsEnvIDKeysKeyIDApplicationsGet)
    call_v1EnvironmentsEnvIDKeysKeyIDApplicationsGet
    ;;
    v1EnvironmentsEnvIDKeysKeyIDCsrGet)
    call_v1EnvironmentsEnvIDKeysKeyIDCsrGet
    ;;
    v1EnvironmentsEnvIDKeysKeyIDCsrPut)
    call_v1EnvironmentsEnvIDKeysKeyIDCsrPut
    ;;
    v1EnvironmentsEnvIDKeysKeyIDDelete)
    call_v1EnvironmentsEnvIDKeysKeyIDDelete
    ;;
    v1EnvironmentsEnvIDKeysKeyIDGet)
    call_v1EnvironmentsEnvIDKeysKeyIDGet
    ;;
    v1EnvironmentsEnvIDKeysKeyIDPut)
    call_v1EnvironmentsEnvIDKeysKeyIDPut
    ;;
    v1EnvironmentsEnvIDKeysPost)
    call_v1EnvironmentsEnvIDKeysPost
    ;;
    v1EnvironmentsEnvIDSigningsPost)
    call_v1EnvironmentsEnvIDSigningsPost
    ;;
    v1EnvironmentsEnvIDVerificationsPost)
    call_v1EnvironmentsEnvIDVerificationsPost
    ;;
    v1EnvironmentsEnvIDCustomDomainsDomIDDelete)
    call_v1EnvironmentsEnvIDCustomDomainsDomIDDelete
    ;;
    v1EnvironmentsEnvIDCustomDomainsDomIDGet)
    call_v1EnvironmentsEnvIDCustomDomainsDomIDGet
    ;;
    v1EnvironmentsEnvIDCustomDomainsDomIDPost)
    call_v1EnvironmentsEnvIDCustomDomainsDomIDPost
    ;;
    v1EnvironmentsEnvIDCustomDomainsGet)
    call_v1EnvironmentsEnvIDCustomDomainsGet
    ;;
    v1EnvironmentsEnvIDCustomDomainsPost)
    call_v1EnvironmentsEnvIDCustomDomainsPost
    ;;
    v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut)
    call_v1EnvironmentsEnvIDDeviceAuthenticationPolicyDeviceAuthPolicyIDPut
    ;;
    v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet)
    call_v1EnvironmentsEnvIDDeviceAuthenticationPolicyGet
    ;;
    createEnvironmentActiveLicense)
    call_createEnvironmentActiveLicense
    ;;
    deleteEnvironment)
    call_deleteEnvironment
    ;;
    readAllEnvironments)
    call_readAllEnvironments
    ;;
    readOneEnvironment)
    call_readOneEnvironment
    ;;
    updateEnvironment)
    call_updateEnvironment
    ;;
    updateEnvironmentType)
    call_updateEnvironmentType
    ;;
    createGatewayCredential)
    call_createGatewayCredential
    ;;
    deleteGatewayCredential)
    call_deleteGatewayCredential
    ;;
    readAllGatewayInstances)
    call_readAllGatewayInstances
    ;;
    readOneGatewayInstance)
    call_readOneGatewayInstance
    ;;
    createGatewayRoleAssignment)
    call_createGatewayRoleAssignment
    ;;
    deleteGatewayRoleAssignment)
    call_deleteGatewayRoleAssignment
    ;;
    readGatewayRoleAssignments)
    call_readGatewayRoleAssignments
    ;;
    readOneGatewayRoleAssignment)
    call_readOneGatewayRoleAssignment
    ;;
    updateGatewayRoleAssignment)
    call_updateGatewayRoleAssignment
    ;;
    createGateway)
    call_createGateway
    ;;
    deleteGateway)
    call_deleteGateway
    ;;
    readAllGateways)
    call_readAllGateways
    ;;
    readOneGateway)
    call_readOneGateway
    ;;
    updateGateway)
    call_updateGateway
    ;;
    createGroup)
    call_createGroup
    ;;
    deleteGroup)
    call_deleteGroup
    ;;
    readAllGroups)
    call_readAllGroups
    ;;
    readOneGroup)
    call_readOneGroup
    ;;
    updateGroup)
    call_updateGroup
    ;;
    v1EnvironmentsEnvIDPropagationMappingMappingIDDelete)
    call_v1EnvironmentsEnvIDPropagationMappingMappingIDDelete
    ;;
    v1EnvironmentsEnvIDPropagationMappingsMappingIDGet)
    call_v1EnvironmentsEnvIDPropagationMappingsMappingIDGet
    ;;
    v1EnvironmentsEnvIDPropagationMappingsMappingIDPut)
    call_v1EnvironmentsEnvIDPropagationMappingsMappingIDPut
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet)
    call_v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost)
    call_v1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost
    ;;
    v1EnvironmentsEnvIDPropagationPlansGet)
    call_v1EnvironmentsEnvIDPropagationPlansGet
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDDelete)
    call_v1EnvironmentsEnvIDPropagationPlansPlanIDDelete
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDGet)
    call_v1EnvironmentsEnvIDPropagationPlansPlanIDGet
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDPut)
    call_v1EnvironmentsEnvIDPropagationPlansPlanIDPut
    ;;
    v1EnvironmentsEnvIDPropagationPlansPost)
    call_v1EnvironmentsEnvIDPropagationPlansPost
    ;;
    v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet)
    call_v1EnvironmentsEnvIDPropagationRevisionsIdlatestGet
    ;;
    v1EnvironmentsEnvIDPropagationRevisionsPost)
    call_v1EnvironmentsEnvIDPropagationRevisionsPost
    ;;
    v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet)
    call_v1EnvironmentsEnvIDPropagationRevisionsPreviousRevisionIDGet
    ;;
    v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet)
    call_v1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet
    ;;
    v1EnvironmentsEnvIDPropagationRulesGet)
    call_v1EnvironmentsEnvIDPropagationRulesGet
    ;;
    v1EnvironmentsEnvIDPropagationRulesPost)
    call_v1EnvironmentsEnvIDPropagationRulesPost
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDDelete)
    call_v1EnvironmentsEnvIDPropagationRulesRuleIDDelete
    ;;
    v1EnvironmentsEnvIDPropagationRulesRuleIDGet)
    call_v1EnvironmentsEnvIDPropagationRulesRuleIDGet
    ;;
    v1EnvironmentsEnvIDPropagationRulesStoreIDPut)
    call_v1EnvironmentsEnvIDPropagationRulesStoreIDPut
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost)
    call_v1EnvironmentsEnvIDPropagationStoreMetadataAqueraPost
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost)
    call_v1EnvironmentsEnvIDPropagationStoreMetadataSalesforceContactsPost
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost)
    call_v1EnvironmentsEnvIDPropagationStoreMetadataSalesforcePost
    ;;
    v1EnvironmentsEnvIDPropagationStoreMetadataScimPost)
    call_v1EnvironmentsEnvIDPropagationStoreMetadataScimPost
    ;;
    v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost)
    call_v1EnvironmentsEnvIDPropagationStoresConnectionStatusPost
    ;;
    v1EnvironmentsEnvIDPropagationStoresGet)
    call_v1EnvironmentsEnvIDPropagationStoresGet
    ;;
    v1EnvironmentsEnvIDPropagationStoresPost)
    call_v1EnvironmentsEnvIDPropagationStoresPost
    ;;
    v1EnvironmentsEnvIDPropagationStoresStoreIDDelete)
    call_v1EnvironmentsEnvIDPropagationStoresStoreIDDelete
    ;;
    v1EnvironmentsEnvIDPropagationStoresStoreIDGet)
    call_v1EnvironmentsEnvIDPropagationStoresStoreIDGet
    ;;
    v1EnvironmentsEnvIDPropagationStoresStoreIDPut)
    call_v1EnvironmentsEnvIDPropagationStoresStoreIDPut
    ;;
    v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete)
    call_v11EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDDelete
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesGet
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDGet
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesIdpAttrIDPut
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDAttributesPost
    ;;
    v1EnvironmentsEnvIDIdentityProvidersGet)
    call_v1EnvironmentsEnvIDIdentityProvidersGet
    ;;
    v1EnvironmentsEnvIDIdentityProvidersPost)
    call_v1EnvironmentsEnvIDIdentityProvidersPost
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDDelete
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDGet)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDGet
    ;;
    v1EnvironmentsEnvIDIdentityProvidersProviderIDPut)
    call_v1EnvironmentsEnvIDIdentityProvidersProviderIDPut
    ;;
    v1EnvironmentsEnvIDImagesImgIDDelete)
    call_v1EnvironmentsEnvIDImagesImgIDDelete
    ;;
    v1EnvironmentsEnvIDImagesImgIDGet)
    call_v1EnvironmentsEnvIDImagesImgIDGet
    ;;
    v1EnvironmentsEnvIDImagesPost)
    call_v1EnvironmentsEnvIDImagesPost
    ;;
    v1EnvironmentsEnvIDIntegrationsGet)
    call_v1EnvironmentsEnvIDIntegrationsGet
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDGet)
    call_v1EnvironmentsEnvIDIntegrationsIntegrationIDGet
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet)
    call_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet)
    call_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet
    ;;
    v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet)
    call_v1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusGet
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDDelete
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDGet
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusL10nStatusIDPut
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDStatusPost
    ;;
    v1EnvironmentsEnvIDLanguagesGet)
    call_v1EnvironmentsEnvIDLanguagesGet
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDDelete)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDDelete
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDGet)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDGet
    ;;
    v1EnvironmentsEnvIDLanguagesLanguageIDPut)
    call_v1EnvironmentsEnvIDLanguagesLanguageIDPut
    ;;
    v1EnvironmentsEnvIDLanguagesPost)
    call_v1EnvironmentsEnvIDLanguagesPost
    ;;
    v1OrganizationsOrgIDLicensesGet)
    call_v1OrganizationsOrgIDLicensesGet
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDGet)
    call_v1OrganizationsOrgIDLicensesLicenseIDGet
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDNameGet)
    call_v1OrganizationsOrgIDLicensesLicenseIDNameGet
    ;;
    v1OrganizationsOrgIDLicensesLicenseIDNamePut)
    call_v1OrganizationsOrgIDLicensesLicenseIDNamePut
    ;;
    v1EnvironmentsEnvIDMfaSettingsDelete)
    call_v1EnvironmentsEnvIDMfaSettingsDelete
    ;;
    v1EnvironmentsEnvIDMfaSettingsGet)
    call_v1EnvironmentsEnvIDMfaSettingsGet
    ;;
    v1EnvironmentsEnvIDMfaSettingsPut)
    call_v1EnvironmentsEnvIDMfaSettingsPut
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsDelete)
    call_v1EnvironmentsEnvIDNotificationsSettingsDelete
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsGet)
    call_v1EnvironmentsEnvIDNotificationsSettingsGet
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPut)
    call_v1EnvironmentsEnvIDNotificationsSettingsPut
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet)
    call_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsGet
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut)
    call_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsPut
    ;;
    v1EnvironmentsEnvIDTemplatesGet)
    call_v1EnvironmentsEnvIDTemplatesGet
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsGet
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameContentsPost
    ;;
    v1EnvironmentsEnvIDTemplatesTemplateNameGet)
    call_v1EnvironmentsEnvIDTemplatesTemplateNameGet
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete)
    call_v1EnvironmentsEnvIDNotificationsSettingsEmailDeliverySettingsDelete
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet)
    call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsGet
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet)
    call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdGet
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut)
    call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPhoneDeliverySettingsIdPut
    ;;
    v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost)
    call_v1EnvironmentsEnvIDNotificationsSettingsPhoneDeliverySettingsPost
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIDTrustedEmailsGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsPost
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdDelete
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdTrustedEmailsTrustedEmailIdPost
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDelete
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdDkimGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdOwnershipGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet)
    call_v1EnvironmentsEnvIDEmailDomainsEmailDomainIdSpfGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsGet)
    call_v1EnvironmentsEnvIDEmailDomainsGet
    ;;
    v1EnvironmentsEnvIDEmailDomainsPost)
    call_v1EnvironmentsEnvIDEmailDomainsPost
    ;;
    v1OrganizationsGet)
    call_v1OrganizationsGet
    ;;
    v1OrganizationsOrgIDGet)
    call_v1OrganizationsOrgIDGet
    ;;
    v1EnvironmentsEnvIDPasswordPoliciesGet)
    call_v1EnvironmentsEnvIDPasswordPoliciesGet
    ;;
    v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet)
    call_v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDGet
    ;;
    v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut)
    call_v1EnvironmentsEnvIDPasswordPoliciesPasswordPolicyIDPut
    ;;
    createPopulation)
    call_createPopulation
    ;;
    deletePopulation)
    call_deletePopulation
    ;;
    readAllPopulations)
    call_readAllPopulations
    ;;
    readOnePopulation)
    call_readOnePopulation
    ;;
    updatePopulation)
    call_updatePopulation
    ;;
    createResourceAttribute)
    call_createResourceAttribute
    ;;
    deleteResourceAttribute)
    call_deleteResourceAttribute
    ;;
    readAllResourceAttributes)
    call_readAllResourceAttributes
    ;;
    readOneResourceAttribute)
    call_readOneResourceAttribute
    ;;
    updateResourceAttribute)
    call_updateResourceAttribute
    ;;
    createResourceScope)
    call_createResourceScope
    ;;
    deleteResourceScope)
    call_deleteResourceScope
    ;;
    readAllResourceScopes)
    call_readAllResourceScopes
    ;;
    readOneResourceScope)
    call_readOneResourceScope
    ;;
    updateResourceScope)
    call_updateResourceScope
    ;;
    createResource)
    call_createResource
    ;;
    deleteResource)
    call_deleteResource
    ;;
    readAllResources)
    call_readAllResources
    ;;
    readOneResource)
    call_readOneResource
    ;;
    updateResource)
    call_updateResource
    ;;
    createRiskPredictor)
    call_createRiskPredictor
    ;;
    deleteRiskAdvancedPredictor)
    call_deleteRiskAdvancedPredictor
    ;;
    readAllRiskPredictors)
    call_readAllRiskPredictors
    ;;
    readOneRiskPredictor)
    call_readOneRiskPredictor
    ;;
    updateRiskPredictor)
    call_updateRiskPredictor
    ;;
    createRiskEvaluation)
    call_createRiskEvaluation
    ;;
    readOneRiskEvaluation)
    call_readOneRiskEvaluation
    ;;
    updateRiskEvaluation)
    call_updateRiskEvaluation
    ;;
    createRiskPolicySet)
    call_createRiskPolicySet
    ;;
    deleteRiskPolicySet)
    call_deleteRiskPolicySet
    ;;
    readOneRiskPolicySet)
    call_readOneRiskPolicySet
    ;;
    readRiskPolicySets)
    call_readRiskPolicySets
    ;;
    updateRiskPolicySet)
    call_updateRiskPolicySet
    ;;
    readAllRoles)
    call_readAllRoles
    ;;
    readOneRole)
    call_readOneRole
    ;;
    createAttribute)
    call_createAttribute
    ;;
    deleteAttribute)
    call_deleteAttribute
    ;;
    readAllSchemaAttributes)
    call_readAllSchemaAttributes
    ;;
    readAllSchemas)
    call_readAllSchemas
    ;;
    readOneAttribute)
    call_readOneAttribute
    ;;
    readOneSchema)
    call_readOneSchema
    ;;
    updateAttributePatch)
    call_updateAttributePatch
    ;;
    updateAttributePut)
    call_updateAttributePut
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesGet)
    call_v1EnvironmentsEnvIDSignOnPoliciesGet
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDDelete
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDGet
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDPut
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPost)
    call_v1EnvironmentsEnvIDSignOnPoliciesPost
    ;;
    v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost)
    call_v1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet
    ;;
    v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost)
    call_v1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost
    ;;
    v1EnvironmentsEnvIDSubscriptionsGet)
    call_v1EnvironmentsEnvIDSubscriptionsGet
    ;;
    v1EnvironmentsEnvIDSubscriptionsPost)
    call_v1EnvironmentsEnvIDSubscriptionsPost
    ;;
    v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete)
    call_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDDelete
    ;;
    v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet)
    call_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDGet
    ;;
    v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut)
    call_v1EnvironmentsEnvIDSubscriptionsSubscriptionIDPut
    ;;
    v1EnvironmentsEnvIDTotalIdentitiesGet)
    call_v1EnvironmentsEnvIDTotalIdentitiesGet
    ;;
    v1EnvironmentsEnvIDUserActivitiesGet)
    call_v1EnvironmentsEnvIDUserActivitiesGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDEnabledGet)
    call_v1EnvironmentsEnvIDUsersUserIDEnabledGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDEnabledPut)
    call_v1EnvironmentsEnvIDUsersUserIDEnabledPut
    ;;
    v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet)
    call_v1EnvironmentsEnvIDUsersUserIDMfaEnabledGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut)
    call_v1EnvironmentsEnvIDUsersUserIDMfaEnabledPut
    ;;
    addUserToGroup)
    call_addUserToGroup
    ;;
    readAllGroupMembershipsForUser)
    call_readAllGroupMembershipsForUser
    ;;
    readOneGroupMembershipForUser)
    call_readOneGroupMembershipForUser
    ;;
    removeUserFromGroup)
    call_removeUserFromGroup
    ;;
    v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet)
    call_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete)
    call_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDDelete
    ;;
    v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet)
    call_v1EnvironmentsEnvIDUsersUserIDLinkedAccountsLinkedAccountIDGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDelete)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesDelete
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDDelete
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDLogsPut
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDNicknamePut
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesDeviceIDPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesGet)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDDevicesPost)
    call_v1EnvironmentsEnvIDUsersUserIDDevicesPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete)
    call_v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDDelete
    ;;
    v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet)
    call_v1EnvironmentsEnvIDUsersUserIDPairingKeysPairingKeyIDGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDPairingKeysPost)
    call_v1EnvironmentsEnvIDUsersUserIDPairingKeysPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDSessionsGet)
    call_v1EnvironmentsEnvIDUsersUserIDSessionsGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete)
    call_v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDDelete
    ;;
    v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet)
    call_v1EnvironmentsEnvIDUsersUserIDSessionsSessionIDGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDPost)
    call_v1EnvironmentsEnvIDUsersUserIDPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet)
    call_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost)
    call_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsAgreementIDPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet)
    call_v1EnvironmentsEnvIDUsersUserIDAgreementConsentsGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDDelete
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyTransactionsTransactionIDPut
    ;;
    v1EnvironmentsEnvIDUsersUserIDPasswordGet)
    call_v1EnvironmentsEnvIDUsersUserIDPasswordGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDPasswordPost)
    call_v1EnvironmentsEnvIDUsersUserIDPasswordPost
    ;;
    v1EnvironmentsEnvIDUsersUserIDPasswordPut)
    call_v1EnvironmentsEnvIDUsersUserIDPasswordPut
    ;;
    v1EnvironmentsEnvIDUsersUserIDPopulationGet)
    call_v1EnvironmentsEnvIDUsersUserIDPopulationGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDPopulationPut)
    call_v1EnvironmentsEnvIDUsersUserIDPopulationPut
    ;;
    createUserRoleAssignment)
    call_createUserRoleAssignment
    ;;
    deleteUserRoleAssignment)
    call_deleteUserRoleAssignment
    ;;
    readOneRoleAssignment)
    call_readOneRoleAssignment
    ;;
    readUserRoleAssignments)
    call_readUserRoleAssignments
    ;;
    createUser)
    call_createUser
    ;;
    deleteUser)
    call_deleteUser
    ;;
    readAllUsers)
    call_readAllUsers
    ;;
    readUser)
    call_readUser
    ;;
    updateUserPatch)
    call_updateUserPatch
    ;;
    updateUserPut)
    call_updateUserPut
    ;;
    v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet)
    call_v1EnvironmentsEnvIDUsersUserIDIdentityProviderGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut)
    call_v1EnvironmentsEnvIDUsersUserIDIdentityProviderPut
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyStatusGet
    ;;
    v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut)
    call_v1EnvironmentsEnvIDUsersUserIDVerifyStatusPut
    ;;
    *)
    ERROR_MSG="ERROR: Unknown operation: $operation"
    exit 1
esac
